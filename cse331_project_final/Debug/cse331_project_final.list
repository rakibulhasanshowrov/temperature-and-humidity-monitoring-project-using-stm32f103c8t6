
cse331_project_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f90  08003f90  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f90  08003f90  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f90  08003f90  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000005c  08003ff4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08003ff4  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa5f  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a8a  00000000  00000000  0002ab27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  0002c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b1  00000000  00000000  0002d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179c0  00000000  00000000  0002dbc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5af  00000000  00000000  00045589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a467  00000000  00000000  00053b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b0c  00000000  00000000  000ddfa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e1aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ee0 	.word	0x08003ee0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003ee0 	.word	0x08003ee0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x27<<1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f023 030f 	bic.w	r3, r3, #15
 8000e54:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	f043 030c 	orr.w	r3, r3, #12
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e70:	7bbb      	ldrb	r3, [r7, #14]
 8000e72:	f043 030c 	orr.w	r3, r3, #12
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, (SLAVE_ADDRESS_LCD),(uint8_t *) data_t, 4, 100);
 8000e84:	f107 0208 	add.w	r2, r7, #8
 8000e88:	2364      	movs	r3, #100	; 0x64
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	214e      	movs	r1, #78	; 0x4e
 8000e90:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <lcd_send_cmd+0x5c>)
 8000e92:	f001 f967 	bl	8002164 <HAL_I2C_Master_Transmit>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000078 	.word	0x20000078

08000ea4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f023 030f 	bic.w	r3, r3, #15
 8000eb4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	f043 030d 	orr.w	r3, r3, #13
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f043 0309 	orr.w	r3, r3, #9
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	f043 030d 	orr.w	r3, r3, #13
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	f043 0309 	orr.w	r3, r3, #9
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ee4:	f107 0208 	add.w	r2, r7, #8
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2304      	movs	r3, #4
 8000eee:	214e      	movs	r1, #78	; 0x4e
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <lcd_send_data+0x5c>)
 8000ef2:	f001 f937 	bl	8002164 <HAL_I2C_Master_Transmit>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000078 	.word	0x20000078

08000f04 <lcd_clear>:

void lcd_clear (void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000f0a:	2080      	movs	r0, #128	; 0x80
 8000f0c:	f7ff ff9a 	bl	8000e44 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	e005      	b.n	8000f22 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000f16:	2020      	movs	r0, #32
 8000f18:	f7ff ffc4 	bl	8000ea4 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b45      	cmp	r3, #69	; 0x45
 8000f26:	ddf6      	ble.n	8000f16 <lcd_clear+0x12>
	}
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
    switch (row)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <lcd_put_cur+0x18>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d005      	beq.n	8000f54 <lcd_put_cur+0x22>
 8000f48:	e009      	b.n	8000f5e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f50:	603b      	str	r3, [r7, #0]
            break;
 8000f52:	e004      	b.n	8000f5e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f5a:	603b      	str	r3, [r7, #0]
            break;
 8000f5c:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff6e 	bl	8000e44 <lcd_send_cmd>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <lcd_init>:


void lcd_init (void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000f74:	2032      	movs	r0, #50	; 0x32
 8000f76:	f000 fcf5 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f7a:	2030      	movs	r0, #48	; 0x30
 8000f7c:	f7ff ff62 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000f80:	2005      	movs	r0, #5
 8000f82:	f000 fcef 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f86:	2030      	movs	r0, #48	; 0x30
 8000f88:	f7ff ff5c 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f000 fce9 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f92:	2030      	movs	r0, #48	; 0x30
 8000f94:	f7ff ff56 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(10);
 8000f98:	200a      	movs	r0, #10
 8000f9a:	f000 fce3 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000f9e:	2020      	movs	r0, #32
 8000fa0:	f7ff ff50 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(10);
 8000fa4:	200a      	movs	r0, #10
 8000fa6:	f000 fcdd 	bl	8001964 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000faa:	2028      	movs	r0, #40	; 0x28
 8000fac:	f7ff ff4a 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 fcd7 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000fb6:	2008      	movs	r0, #8
 8000fb8:	f7ff ff44 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 fcd1 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff ff3e 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f000 fccb 	bl	8001964 <HAL_Delay>
	HAL_Delay(1);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 fcc8 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000fd4:	2006      	movs	r0, #6
 8000fd6:	f7ff ff35 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f000 fcc2 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000fe0:	200c      	movs	r0, #12
 8000fe2:	f7ff ff2f 	bl	8000e44 <lcd_send_cmd>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ff2:	e006      	b.n	8001002 <lcd_send_string+0x18>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff51 	bl	8000ea4 <lcd_send_data>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f4      	bne.n	8000ff4 <lcd_send_string+0xa>
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <microDelay>:
uint8_t TFD = 0;
char strCopy1[40];
char strCopy2[40];

void microDelay (uint16_t delay)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <microDelay+0x2c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001026:	bf00      	nop
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <microDelay+0x2c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3f9      	bcc.n	8001028 <microDelay+0x14>
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	200000cc 	.word	0x200000cc

08001044 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 800105a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2302      	movs	r3, #2
 8001066:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	482c      	ldr	r0, [pc, #176]	; (8001124 <DHT11_Start+0xe0>)
 8001072:	f000 fd7f 	bl	8001b74 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107c:	4829      	ldr	r0, [pc, #164]	; (8001124 <DHT11_Start+0xe0>)
 800107e:	f000 ff14 	bl	8001eaa <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001082:	2014      	movs	r0, #20
 8001084:	f000 fc6e 	bl	8001964 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4825      	ldr	r0, [pc, #148]	; (8001124 <DHT11_Start+0xe0>)
 8001090:	f000 ff0b 	bl	8001eaa <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8001094:	201e      	movs	r0, #30
 8001096:	f7ff ffbd 	bl	8001014 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 800109e:	2301      	movs	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	481f      	ldr	r0, [pc, #124]	; (8001124 <DHT11_Start+0xe0>)
 80010a8:	f000 fd64 	bl	8001b74 <HAL_GPIO_Init>
  microDelay (40);
 80010ac:	2028      	movs	r0, #40	; 0x28
 80010ae:	f7ff ffb1 	bl	8001014 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80010b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b6:	481b      	ldr	r0, [pc, #108]	; (8001124 <DHT11_Start+0xe0>)
 80010b8:	f000 fee0 	bl	8001e7c <HAL_GPIO_ReadPin>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10c      	bne.n	80010dc <DHT11_Start+0x98>
  {
    microDelay (80);
 80010c2:	2050      	movs	r0, #80	; 0x50
 80010c4:	f7ff ffa6 	bl	8001014 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80010c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010cc:	4815      	ldr	r0, [pc, #84]	; (8001124 <DHT11_Start+0xe0>)
 80010ce:	f000 fed5 	bl	8001e7c <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <DHT11_Start+0x98>
 80010d8:	2301      	movs	r3, #1
 80010da:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 80010dc:	f000 fc38 	bl	8001950 <HAL_GetTick>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a11      	ldr	r2, [pc, #68]	; (8001128 <DHT11_Start+0xe4>)
 80010e4:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 80010e6:	f000 fc33 	bl	8001950 <HAL_GetTick>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a0f      	ldr	r2, [pc, #60]	; (800112c <DHT11_Start+0xe8>)
 80010ee:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010f0:	e004      	b.n	80010fc <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 80010f2:	f000 fc2d 	bl	8001950 <HAL_GetTick>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a0c      	ldr	r2, [pc, #48]	; (800112c <DHT11_Start+0xe8>)
 80010fa:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <DHT11_Start+0xe0>)
 8001102:	f000 febb 	bl	8001e7c <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <DHT11_Start+0xd6>
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <DHT11_Start+0xe4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	1c9a      	adds	r2, r3, #2
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <DHT11_Start+0xe8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d8eb      	bhi.n	80010f2 <DHT11_Start+0xae>
  }
  return Response;
 800111a:	7dfb      	ldrb	r3, [r7, #23]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40010c00 	.word	0x40010c00
 8001128:	2000011c 	.word	0x2000011c
 800112c:	20000120 	.word	0x20000120

08001130 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8001136:	2300      	movs	r3, #0
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	e066      	b.n	800120a <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 800113c:	f000 fc08 	bl	8001950 <HAL_GetTick>
 8001140:	4603      	mov	r3, r0
 8001142:	4a36      	ldr	r2, [pc, #216]	; (800121c <DHT11_Read+0xec>)
 8001144:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001146:	f000 fc03 	bl	8001950 <HAL_GetTick>
 800114a:	4603      	mov	r3, r0
 800114c:	4a34      	ldr	r2, [pc, #208]	; (8001220 <DHT11_Read+0xf0>)
 800114e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001150:	e004      	b.n	800115c <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001152:	f000 fbfd 	bl	8001950 <HAL_GetTick>
 8001156:	4603      	mov	r3, r0
 8001158:	4a31      	ldr	r2, [pc, #196]	; (8001220 <DHT11_Read+0xf0>)
 800115a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800115c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001160:	4830      	ldr	r0, [pc, #192]	; (8001224 <DHT11_Read+0xf4>)
 8001162:	f000 fe8b 	bl	8001e7c <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d106      	bne.n	800117a <DHT11_Read+0x4a>
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <DHT11_Read+0xec>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	1c9a      	adds	r2, r3, #2
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <DHT11_Read+0xf0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d8eb      	bhi.n	8001152 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 800117a:	2028      	movs	r0, #40	; 0x28
 800117c:	f7ff ff4a 	bl	8001014 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001184:	4827      	ldr	r0, [pc, #156]	; (8001224 <DHT11_Read+0xf4>)
 8001186:	f000 fe79 	bl	8001e7c <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d10e      	bne.n	80011ae <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2201      	movs	r2, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	b25b      	sxtb	r3, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011a6:	4013      	ands	r3, r2
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	71bb      	strb	r3, [r7, #6]
 80011ac:	e00b      	b.n	80011c6 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f1c3 0307 	rsb	r3, r3, #7
 80011b4:	2201      	movs	r2, #1
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	b25a      	sxtb	r2, r3
 80011bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 80011c6:	f000 fbc3 	bl	8001950 <HAL_GetTick>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a13      	ldr	r2, [pc, #76]	; (800121c <DHT11_Read+0xec>)
 80011ce:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80011d0:	f000 fbbe 	bl	8001950 <HAL_GetTick>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <DHT11_Read+0xf0>)
 80011d8:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011da:	e004      	b.n	80011e6 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 80011dc:	f000 fbb8 	bl	8001950 <HAL_GetTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <DHT11_Read+0xf0>)
 80011e4:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ea:	480e      	ldr	r0, [pc, #56]	; (8001224 <DHT11_Read+0xf4>)
 80011ec:	f000 fe46 	bl	8001e7c <HAL_GPIO_ReadPin>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <DHT11_Read+0xd4>
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <DHT11_Read+0xec>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1c9a      	adds	r2, r3, #2
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <DHT11_Read+0xf0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8eb      	bhi.n	80011dc <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	3301      	adds	r3, #1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b07      	cmp	r3, #7
 800120e:	d995      	bls.n	800113c <DHT11_Read+0xc>
    }
  }
  return b;
 8001210:	79bb      	ldrb	r3, [r7, #6]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000011c 	.word	0x2000011c
 8001220:	20000120 	.word	0x20000120
 8001224:	40010c00 	.word	0x40010c00

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b598      	push	{r3, r4, r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122c:	f000 fb38 	bl	80018a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001230:	f000 f926 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001234:	f000 f9e8 	bl	8001608 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001238:	f000 f968 	bl	800150c <MX_I2C1_Init>
  MX_TIM1_Init();
 800123c:	f000 f994 	bl	8001568 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    lcd_init ();
 8001240:	f7ff fe96 	bl	8000f70 <lcd_init>

    lcd_send_string ("Welcome");
 8001244:	487b      	ldr	r0, [pc, #492]	; (8001434 <main+0x20c>)
 8001246:	f7ff fed0 	bl	8000fea <lcd_send_string>

    HAL_Delay(1000);
 800124a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124e:	f000 fb89 	bl	8001964 <HAL_Delay>

    lcd_put_cur(1, 0);
 8001252:	2100      	movs	r1, #0
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff fe6c 	bl	8000f32 <lcd_put_cur>

    lcd_send_string("to CSE331");
 800125a:	4877      	ldr	r0, [pc, #476]	; (8001438 <main+0x210>)
 800125c:	f7ff fec5 	bl	8000fea <lcd_send_string>

    HAL_Delay(2000);
 8001260:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001264:	f000 fb7e 	bl	8001964 <HAL_Delay>

    lcd_clear ();
 8001268:	f7ff fe4c 	bl	8000f04 <lcd_clear>
    HAL_TIM_Base_Start(&htim1);
 800126c:	4873      	ldr	r0, [pc, #460]	; (800143c <main+0x214>)
 800126e:	f001 ff1d 	bl	80030ac <HAL_TIM_Base_Start>
 while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(DHT11_Start())
 8001272:	f7ff fee7 	bl	8001044 <DHT11_Start>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80d5 	beq.w	8001428 <main+0x200>
	      {
	        RHI = DHT11_Read(); // Relative humidity integral
 800127e:	f7ff ff57 	bl	8001130 <DHT11_Read>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b6e      	ldr	r3, [pc, #440]	; (8001440 <main+0x218>)
 8001288:	701a      	strb	r2, [r3, #0]
	        RHD = DHT11_Read(); // Relative humidity decimal
 800128a:	f7ff ff51 	bl	8001130 <DHT11_Read>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <main+0x21c>)
 8001294:	701a      	strb	r2, [r3, #0]
	        TCI = DHT11_Read(); // Celsius integral
 8001296:	f7ff ff4b 	bl	8001130 <DHT11_Read>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <main+0x220>)
 80012a0:	701a      	strb	r2, [r3, #0]
	        TCD = DHT11_Read(); // Celsius decimal
 80012a2:	f7ff ff45 	bl	8001130 <DHT11_Read>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b68      	ldr	r3, [pc, #416]	; (800144c <main+0x224>)
 80012ac:	701a      	strb	r2, [r3, #0]
	        SUM = DHT11_Read(); // Check sum
 80012ae:	f7ff ff3f 	bl	8001130 <DHT11_Read>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b66      	ldr	r3, [pc, #408]	; (8001450 <main+0x228>)
 80012b8:	701a      	strb	r2, [r3, #0]
	        if (RHI + RHD + TCI + TCD == SUM)
 80012ba:	4b61      	ldr	r3, [pc, #388]	; (8001440 <main+0x218>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	4b60      	ldr	r3, [pc, #384]	; (8001444 <main+0x21c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a60      	ldr	r2, [pc, #384]	; (8001448 <main+0x220>)
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a5f      	ldr	r2, [pc, #380]	; (800144c <main+0x224>)
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a5f      	ldr	r2, [pc, #380]	; (8001450 <main+0x228>)
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d179      	bne.n	80013ce <main+0x1a6>
	        {

	          tCelsius = (float)TCI + (float)(TCD/10.0);
 80012da:	4b5b      	ldr	r3, [pc, #364]	; (8001448 <main+0x220>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fc08 	bl	8000af4 <__aeabi_ui2f>
 80012e4:	4604      	mov	r4, r0
 80012e6:	4b59      	ldr	r3, [pc, #356]	; (800144c <main+0x224>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f880 	bl	80003f0 <__aeabi_i2d>
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b57      	ldr	r3, [pc, #348]	; (8001454 <main+0x22c>)
 80012f6:	f7ff fa0f 	bl	8000718 <__aeabi_ddiv>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f7ff faf1 	bl	80008e8 <__aeabi_d2f>
 8001306:	4603      	mov	r3, r0
 8001308:	4619      	mov	r1, r3
 800130a:	4620      	mov	r0, r4
 800130c:	f7ff fb42 	bl	8000994 <__addsf3>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	4b50      	ldr	r3, [pc, #320]	; (8001458 <main+0x230>)
 8001316:	601a      	str	r2, [r3, #0]
	          tFahrenheit = tCelsius * 9/5 + 32;
 8001318:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <main+0x230>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	494f      	ldr	r1, [pc, #316]	; (800145c <main+0x234>)
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fc40 	bl	8000ba4 <__aeabi_fmul>
 8001324:	4603      	mov	r3, r0
 8001326:	494e      	ldr	r1, [pc, #312]	; (8001460 <main+0x238>)
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fcef 	bl	8000d0c <__aeabi_fdiv>
 800132e:	4603      	mov	r3, r0
 8001330:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fb2d 	bl	8000994 <__addsf3>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	4b49      	ldr	r3, [pc, #292]	; (8001464 <main+0x23c>)
 8001340:	601a      	str	r2, [r3, #0]
	          RH = (float)RHI + (float)(RHD/10.0);
 8001342:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <main+0x218>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fbd4 	bl	8000af4 <__aeabi_ui2f>
 800134c:	4604      	mov	r4, r0
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <main+0x21c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f84c 	bl	80003f0 <__aeabi_i2d>
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <main+0x22c>)
 800135e:	f7ff f9db 	bl	8000718 <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fabd 	bl	80008e8 <__aeabi_d2f>
 800136e:	4603      	mov	r3, r0
 8001370:	4619      	mov	r1, r3
 8001372:	4620      	mov	r0, r4
 8001374:	f7ff fb0e 	bl	8000994 <__addsf3>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <main+0x240>)
 800137e:	601a      	str	r2, [r3, #0]


	          sprintf(strCopy1,"Temp:%d.%d C", TCI,TCD);
 8001380:	4b31      	ldr	r3, [pc, #196]	; (8001448 <main+0x220>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <main+0x224>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4938      	ldr	r1, [pc, #224]	; (800146c <main+0x244>)
 800138c:	4838      	ldr	r0, [pc, #224]	; (8001470 <main+0x248>)
 800138e:	f002 f8f5 	bl	800357c <siprintf>
	          lcd_put_cur(0, 0);
 8001392:	2100      	movs	r1, #0
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff fdcc 	bl	8000f32 <lcd_put_cur>
	          HAL_Delay(100);
 800139a:	2064      	movs	r0, #100	; 0x64
 800139c:	f000 fae2 	bl	8001964 <HAL_Delay>
	          lcd_send_string (strCopy1);
 80013a0:	4833      	ldr	r0, [pc, #204]	; (8001470 <main+0x248>)
 80013a2:	f7ff fe22 	bl	8000fea <lcd_send_string>
	              lcd_put_cur(1, 0);
 80013a6:	2100      	movs	r1, #0
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff fdc2 	bl	8000f32 <lcd_put_cur>
	              sprintf(strCopy2,"Humidity:%d.%d %%", RHI,RHD);
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <main+0x218>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <main+0x21c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	492e      	ldr	r1, [pc, #184]	; (8001474 <main+0x24c>)
 80013ba:	482f      	ldr	r0, [pc, #188]	; (8001478 <main+0x250>)
 80013bc:	f002 f8de 	bl	800357c <siprintf>
	              lcd_send_string (strCopy2);
 80013c0:	482d      	ldr	r0, [pc, #180]	; (8001478 <main+0x250>)
 80013c2:	f7ff fe12 	bl	8000fea <lcd_send_string>
	              HAL_Delay(1000);
 80013c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ca:	f000 facb 	bl	8001964 <HAL_Delay>

	        }

	        if (TCI >= 27)
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <main+0x220>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b1a      	cmp	r3, #26
 80013d4:	d90b      	bls.n	80013ee <main+0x1c6>
	        {
	          //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013dc:	4827      	ldr	r0, [pc, #156]	; (800147c <main+0x254>)
 80013de:	f000 fd64 	bl	8001eaa <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e8:	4824      	ldr	r0, [pc, #144]	; (800147c <main+0x254>)
 80013ea:	f000 fd5e 	bl	8001eaa <HAL_GPIO_WritePin>
	          //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
	        }
	        if (TCI < 27)
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <main+0x220>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b1a      	cmp	r3, #26
 80013f4:	d80c      	bhi.n	8001410 <main+0x1e8>
	        	        {
	        	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fc:	481f      	ldr	r0, [pc, #124]	; (800147c <main+0x254>)
 80013fe:	f000 fd54 	bl	8001eaa <HAL_GPIO_WritePin>
	        	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001408:	481c      	ldr	r0, [pc, #112]	; (800147c <main+0x254>)
 800140a:	f000 fd4e 	bl	8001eaa <HAL_GPIO_WritePin>
 800140e:	e00b      	b.n	8001428 <main+0x200>
	        	          //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
	        	          //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
	        	        }
	        else
	        {
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001416:	4819      	ldr	r0, [pc, #100]	; (800147c <main+0x254>)
 8001418:	f000 fd47 	bl	8001eaa <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800141c:	2201      	movs	r2, #1
 800141e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001422:	4816      	ldr	r0, [pc, #88]	; (800147c <main+0x254>)
 8001424:	f000 fd41 	bl	8001eaa <HAL_GPIO_WritePin>
	        }
	      }
	      HAL_Delay(2000);
 8001428:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800142c:	f000 fa9a 	bl	8001964 <HAL_Delay>
	  if(DHT11_Start())
 8001430:	e71f      	b.n	8001272 <main+0x4a>
 8001432:	bf00      	nop
 8001434:	08003ef8 	.word	0x08003ef8
 8001438:	08003f00 	.word	0x08003f00
 800143c:	200000cc 	.word	0x200000cc
 8001440:	20000114 	.word	0x20000114
 8001444:	20000115 	.word	0x20000115
 8001448:	20000116 	.word	0x20000116
 800144c:	20000117 	.word	0x20000117
 8001450:	20000118 	.word	0x20000118
 8001454:	40240000 	.word	0x40240000
 8001458:	20000124 	.word	0x20000124
 800145c:	41100000 	.word	0x41100000
 8001460:	40a00000 	.word	0x40a00000
 8001464:	20000128 	.word	0x20000128
 8001468:	2000012c 	.word	0x2000012c
 800146c:	08003f0c 	.word	0x08003f0c
 8001470:	20000130 	.word	0x20000130
 8001474:	08003f1c 	.word	0x08003f1c
 8001478:	20000158 	.word	0x20000158
 800147c:	40010c00 	.word	0x40010c00

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b090      	sub	sp, #64	; 0x40
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 0318 	add.w	r3, r7, #24
 800148a:	2228      	movs	r2, #40	; 0x28
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f002 f894 	bl	80035bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b0:	2301      	movs	r3, #1
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b4:	2302      	movs	r3, #2
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c4:	f107 0318 	add.w	r3, r7, #24
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 f9a3 	bl	8002814 <HAL_RCC_OscConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014d4:	f000 f8c6 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d8:	230f      	movs	r3, #15
 80014da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014dc:	2302      	movs	r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2102      	movs	r1, #2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 fc10 	bl	8002d18 <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014fe:	f000 f8b1 	bl	8001664 <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	3740      	adds	r7, #64	; 0x40
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_I2C1_Init+0x50>)
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <MX_I2C1_Init+0x54>)
 8001514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_I2C1_Init+0x50>)
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_I2C1_Init+0x58>)
 800151a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_I2C1_Init+0x50>)
 800152a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <MX_I2C1_Init+0x50>)
 800154a:	f000 fcc7 	bl	8001edc <HAL_I2C_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001554:	f000 f886 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000078 	.word	0x20000078
 8001560:	40005400 	.word	0x40005400
 8001564:	000186a0 	.word	0x000186a0

08001568 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_TIM1_Init+0x98>)
 8001586:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <MX_TIM1_Init+0x9c>)
 8001588:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM1_Init+0x98>)
 800158c:	2247      	movs	r2, #71	; 0x47
 800158e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM1_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_TIM1_Init+0x98>)
 8001598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM1_Init+0x98>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM1_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_TIM1_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_TIM1_Init+0x98>)
 80015b2:	f001 fd2b 	bl	800300c <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015bc:	f000 f852 	bl	8001664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4619      	mov	r1, r3
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <MX_TIM1_Init+0x98>)
 80015ce:	f001 fdb7 	bl	8003140 <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015d8:	f000 f844 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_TIM1_Init+0x98>)
 80015ea:	f001 ff69 	bl	80034c0 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015f4:	f000 f836 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200000cc 	.word	0x200000cc
 8001604:	40012c00 	.word	0x40012c00

08001608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_GPIO_Init+0x58>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a13      	ldr	r2, [pc, #76]	; (8001660 <MX_GPIO_Init+0x58>)
 8001614:	f043 0320 	orr.w	r3, r3, #32
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_GPIO_Init+0x58>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0320 	and.w	r3, r3, #32
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_GPIO_Init+0x58>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <MX_GPIO_Init+0x58>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6193      	str	r3, [r2, #24]
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_GPIO_Init+0x58>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_GPIO_Init+0x58>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	4a07      	ldr	r2, [pc, #28]	; (8001660 <MX_GPIO_Init+0x58>)
 8001644:	f043 0308 	orr.w	r3, r3, #8
 8001648:	6193      	str	r3, [r2, #24]
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <MX_GPIO_Init+0x58>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40021000 	.word	0x40021000

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	e7fe      	b.n	800166c <Error_Handler+0x8>
	...

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_MspInit+0x5c>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_MspInit+0x5c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6193      	str	r3, [r2, #24]
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_MspInit+0x5c>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_MspInit+0x5c>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_MspInit+0x5c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	61d3      	str	r3, [r2, #28]
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_MspInit+0x5c>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_MspInit+0x60>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_MspInit+0x60>)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000

080016d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a15      	ldr	r2, [pc, #84]	; (8001744 <HAL_I2C_MspInit+0x70>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d123      	bne.n	800173c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_I2C_MspInit+0x74>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <HAL_I2C_MspInit+0x74>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_I2C_MspInit+0x74>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800170c:	23c0      	movs	r3, #192	; 0xc0
 800170e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001710:	2312      	movs	r3, #18
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	480b      	ldr	r0, [pc, #44]	; (800174c <HAL_I2C_MspInit+0x78>)
 8001720:	f000 fa28 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_I2C_MspInit+0x74>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_I2C_MspInit+0x74>)
 800172a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800172e:	61d3      	str	r3, [r2, #28]
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_I2C_MspInit+0x74>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40005400 	.word	0x40005400
 8001748:	40021000 	.word	0x40021000
 800174c:	40010c00 	.word	0x40010c00

08001750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a09      	ldr	r2, [pc, #36]	; (8001784 <HAL_TIM_Base_MspInit+0x34>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d10b      	bne.n	800177a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_TIM_Base_MspInit+0x38>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <HAL_TIM_Base_MspInit+0x38>)
 8001768:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_TIM_Base_MspInit+0x38>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40012c00 	.word	0x40012c00
 8001788:	40021000 	.word	0x40021000

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d2:	f000 f8ab 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <_sbrk+0x5c>)
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <_sbrk+0x60>)
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <_sbrk+0x64>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <_sbrk+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800180c:	f001 fede 	bl	80035cc <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e009      	b.n	8001830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <_sbrk+0x64>)
 800182c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20005000 	.word	0x20005000
 800183c:	00000400 	.word	0x00000400
 8001840:	20000180 	.word	0x20000180
 8001844:	200002d0 	.word	0x200002d0

08001848 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001854:	f7ff fff8 	bl	8001848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001858:	480b      	ldr	r0, [pc, #44]	; (8001888 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800185a:	490c      	ldr	r1, [pc, #48]	; (800188c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800185c:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <LoopFillZerobss+0x16>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001870:	4c09      	ldr	r4, [pc, #36]	; (8001898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187e:	f001 feab 	bl	80035d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001882:	f7ff fcd1 	bl	8001228 <main>
  bx lr
 8001886:	4770      	bx	lr
  ldr r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800188c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001890:	08003f98 	.word	0x08003f98
  ldr r2, =_sbss
 8001894:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001898:	200002d0 	.word	0x200002d0

0800189c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800189c:	e7fe      	b.n	800189c <ADC1_2_IRQHandler>
	...

080018a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_Init+0x28>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_Init+0x28>)
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 f92b 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	200f      	movs	r0, #15
 80018b8:	f000 f808 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f7ff fed8 	bl	8001670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40022000 	.word	0x40022000

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x54>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x58>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f935 	bl	8001b5a <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00e      	b.n	8001918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d80a      	bhi.n	8001916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f000 f90b 	bl	8001b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HAL_InitTick+0x5c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000000 	.word	0x20000000
 8001924:	20000008 	.word	0x20000008
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_IncTick+0x1c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_IncTick+0x20>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a03      	ldr	r2, [pc, #12]	; (800194c <HAL_IncTick+0x20>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	20000008 	.word	0x20000008
 800194c:	20000184 	.word	0x20000184

08001950 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b02      	ldr	r3, [pc, #8]	; (8001960 <HAL_GetTick+0x10>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	20000184 	.word	0x20000184

08001964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff fff0 	bl	8001950 <HAL_GetTick>
 8001970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d005      	beq.n	800198a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_Delay+0x44>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198a:	bf00      	nop
 800198c:	f7ff ffe0 	bl	8001950 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8f7      	bhi.n	800198c <HAL_Delay+0x28>
  {
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad8:	d301      	bcc.n	8001ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00f      	b.n	8001afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <SysTick_Config+0x40>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f7ff ff90 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <SysTick_Config+0x40>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <SysTick_Config+0x40>)
 8001af8:	2207      	movs	r2, #7
 8001afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	e000e010 	.word	0xe000e010

08001b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff49 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff5e 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff90 	bl	8001a64 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff5f 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffb0 	bl	8001ac8 <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b08b      	sub	sp, #44	; 0x2c
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b86:	e169      	b.n	8001e5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	f040 8158 	bne.w	8001e56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4a9a      	ldr	r2, [pc, #616]	; (8001e14 <HAL_GPIO_Init+0x2a0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d05e      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bb0:	4a98      	ldr	r2, [pc, #608]	; (8001e14 <HAL_GPIO_Init+0x2a0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d875      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bb6:	4a98      	ldr	r2, [pc, #608]	; (8001e18 <HAL_GPIO_Init+0x2a4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d058      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bbc:	4a96      	ldr	r2, [pc, #600]	; (8001e18 <HAL_GPIO_Init+0x2a4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d86f      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bc2:	4a96      	ldr	r2, [pc, #600]	; (8001e1c <HAL_GPIO_Init+0x2a8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d052      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bc8:	4a94      	ldr	r2, [pc, #592]	; (8001e1c <HAL_GPIO_Init+0x2a8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d869      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bce:	4a94      	ldr	r2, [pc, #592]	; (8001e20 <HAL_GPIO_Init+0x2ac>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d04c      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bd4:	4a92      	ldr	r2, [pc, #584]	; (8001e20 <HAL_GPIO_Init+0x2ac>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d863      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bda:	4a92      	ldr	r2, [pc, #584]	; (8001e24 <HAL_GPIO_Init+0x2b0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d046      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001be0:	4a90      	ldr	r2, [pc, #576]	; (8001e24 <HAL_GPIO_Init+0x2b0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d85d      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d82a      	bhi.n	8001c40 <HAL_GPIO_Init+0xcc>
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d859      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bee:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <HAL_GPIO_Init+0x80>)
 8001bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf4:	08001c6f 	.word	0x08001c6f
 8001bf8:	08001c49 	.word	0x08001c49
 8001bfc:	08001c5b 	.word	0x08001c5b
 8001c00:	08001c9d 	.word	0x08001c9d
 8001c04:	08001ca3 	.word	0x08001ca3
 8001c08:	08001ca3 	.word	0x08001ca3
 8001c0c:	08001ca3 	.word	0x08001ca3
 8001c10:	08001ca3 	.word	0x08001ca3
 8001c14:	08001ca3 	.word	0x08001ca3
 8001c18:	08001ca3 	.word	0x08001ca3
 8001c1c:	08001ca3 	.word	0x08001ca3
 8001c20:	08001ca3 	.word	0x08001ca3
 8001c24:	08001ca3 	.word	0x08001ca3
 8001c28:	08001ca3 	.word	0x08001ca3
 8001c2c:	08001ca3 	.word	0x08001ca3
 8001c30:	08001ca3 	.word	0x08001ca3
 8001c34:	08001ca3 	.word	0x08001ca3
 8001c38:	08001c51 	.word	0x08001c51
 8001c3c:	08001c65 	.word	0x08001c65
 8001c40:	4a79      	ldr	r2, [pc, #484]	; (8001e28 <HAL_GPIO_Init+0x2b4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c46:	e02c      	b.n	8001ca2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	623b      	str	r3, [r7, #32]
          break;
 8001c4e:	e029      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	3304      	adds	r3, #4
 8001c56:	623b      	str	r3, [r7, #32]
          break;
 8001c58:	e024      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	3308      	adds	r3, #8
 8001c60:	623b      	str	r3, [r7, #32]
          break;
 8001c62:	e01f      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	330c      	adds	r3, #12
 8001c6a:	623b      	str	r3, [r7, #32]
          break;
 8001c6c:	e01a      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c76:	2304      	movs	r3, #4
 8001c78:	623b      	str	r3, [r7, #32]
          break;
 8001c7a:	e013      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c84:	2308      	movs	r3, #8
 8001c86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	611a      	str	r2, [r3, #16]
          break;
 8001c8e:	e009      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c90:	2308      	movs	r3, #8
 8001c92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	615a      	str	r2, [r3, #20]
          break;
 8001c9a:	e003      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
          break;
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          break;
 8001ca2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2bff      	cmp	r3, #255	; 0xff
 8001ca8:	d801      	bhi.n	8001cae <HAL_GPIO_Init+0x13a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	e001      	b.n	8001cb2 <HAL_GPIO_Init+0x13e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2bff      	cmp	r3, #255	; 0xff
 8001cb8:	d802      	bhi.n	8001cc0 <HAL_GPIO_Init+0x14c>
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_Init+0x152>
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	3b08      	subs	r3, #8
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	210f      	movs	r1, #15
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	6a39      	ldr	r1, [r7, #32]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80b1 	beq.w	8001e56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf4:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a4c      	ldr	r2, [pc, #304]	; (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d0c:	4a48      	ldr	r2, [pc, #288]	; (8001e30 <HAL_GPIO_Init+0x2bc>)
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a40      	ldr	r2, [pc, #256]	; (8001e34 <HAL_GPIO_Init+0x2c0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d013      	beq.n	8001d60 <HAL_GPIO_Init+0x1ec>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a3f      	ldr	r2, [pc, #252]	; (8001e38 <HAL_GPIO_Init+0x2c4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00d      	beq.n	8001d5c <HAL_GPIO_Init+0x1e8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a3e      	ldr	r2, [pc, #248]	; (8001e3c <HAL_GPIO_Init+0x2c8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d007      	beq.n	8001d58 <HAL_GPIO_Init+0x1e4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a3d      	ldr	r2, [pc, #244]	; (8001e40 <HAL_GPIO_Init+0x2cc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_GPIO_Init+0x1e0>
 8001d50:	2303      	movs	r3, #3
 8001d52:	e006      	b.n	8001d62 <HAL_GPIO_Init+0x1ee>
 8001d54:	2304      	movs	r3, #4
 8001d56:	e004      	b.n	8001d62 <HAL_GPIO_Init+0x1ee>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e002      	b.n	8001d62 <HAL_GPIO_Init+0x1ee>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_GPIO_Init+0x1ee>
 8001d60:	2300      	movs	r3, #0
 8001d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d64:	f002 0203 	and.w	r2, r2, #3
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	4093      	lsls	r3, r2
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d72:	492f      	ldr	r1, [pc, #188]	; (8001e30 <HAL_GPIO_Init+0x2bc>)
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d006      	beq.n	8001d9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	492c      	ldr	r1, [pc, #176]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4928      	ldr	r1, [pc, #160]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	4922      	ldr	r1, [pc, #136]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	491e      	ldr	r1, [pc, #120]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4918      	ldr	r1, [pc, #96]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	4914      	ldr	r1, [pc, #80]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d021      	beq.n	8001e48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	490e      	ldr	r1, [pc, #56]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
 8001e10:	e021      	b.n	8001e56 <HAL_GPIO_Init+0x2e2>
 8001e12:	bf00      	nop
 8001e14:	10320000 	.word	0x10320000
 8001e18:	10310000 	.word	0x10310000
 8001e1c:	10220000 	.word	0x10220000
 8001e20:	10210000 	.word	0x10210000
 8001e24:	10120000 	.word	0x10120000
 8001e28:	10110000 	.word	0x10110000
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010000 	.word	0x40010000
 8001e34:	40010800 	.word	0x40010800
 8001e38:	40010c00 	.word	0x40010c00
 8001e3c:	40011000 	.word	0x40011000
 8001e40:	40011400 	.word	0x40011400
 8001e44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_GPIO_Init+0x304>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	4909      	ldr	r1, [pc, #36]	; (8001e78 <HAL_GPIO_Init+0x304>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	3301      	adds	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	fa22 f303 	lsr.w	r3, r2, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f47f ae8e 	bne.w	8001b88 <HAL_GPIO_Init+0x14>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	372c      	adds	r7, #44	; 0x2c
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e001      	b.n	8001e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	807b      	strh	r3, [r7, #2]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eba:	787b      	ldrb	r3, [r7, #1]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec0:	887a      	ldrh	r2, [r7, #2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ec6:	e003      	b.n	8001ed0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ec8:	887b      	ldrh	r3, [r7, #2]
 8001eca:	041a      	lsls	r2, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	611a      	str	r2, [r3, #16]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e12b      	b.n	8002146 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fbe6 	bl	80016d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	; 0x24
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f40:	f001 f832 	bl	8002fa8 <HAL_RCC_GetPCLK1Freq>
 8001f44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a81      	ldr	r2, [pc, #516]	; (8002150 <HAL_I2C_Init+0x274>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d807      	bhi.n	8001f60 <HAL_I2C_Init+0x84>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a80      	ldr	r2, [pc, #512]	; (8002154 <HAL_I2C_Init+0x278>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	bf94      	ite	ls
 8001f58:	2301      	movls	r3, #1
 8001f5a:	2300      	movhi	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	e006      	b.n	8001f6e <HAL_I2C_Init+0x92>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a7d      	ldr	r2, [pc, #500]	; (8002158 <HAL_I2C_Init+0x27c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	bf94      	ite	ls
 8001f68:	2301      	movls	r3, #1
 8001f6a:	2300      	movhi	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e0e7      	b.n	8002146 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4a78      	ldr	r2, [pc, #480]	; (800215c <HAL_I2C_Init+0x280>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0c9b      	lsrs	r3, r3, #18
 8001f80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a6a      	ldr	r2, [pc, #424]	; (8002150 <HAL_I2C_Init+0x274>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d802      	bhi.n	8001fb0 <HAL_I2C_Init+0xd4>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	3301      	adds	r3, #1
 8001fae:	e009      	b.n	8001fc4 <HAL_I2C_Init+0xe8>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	4a69      	ldr	r2, [pc, #420]	; (8002160 <HAL_I2C_Init+0x284>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	495c      	ldr	r1, [pc, #368]	; (8002150 <HAL_I2C_Init+0x274>)
 8001fe0:	428b      	cmp	r3, r1
 8001fe2:	d819      	bhi.n	8002018 <HAL_I2C_Init+0x13c>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1e59      	subs	r1, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff2:	1c59      	adds	r1, r3, #1
 8001ff4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ff8:	400b      	ands	r3, r1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_I2C_Init+0x138>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1e59      	subs	r1, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fbb1 f3f3 	udiv	r3, r1, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002012:	e051      	b.n	80020b8 <HAL_I2C_Init+0x1dc>
 8002014:	2304      	movs	r3, #4
 8002016:	e04f      	b.n	80020b8 <HAL_I2C_Init+0x1dc>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d111      	bne.n	8002044 <HAL_I2C_Init+0x168>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1e58      	subs	r0, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	440b      	add	r3, r1
 800202e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002032:	3301      	adds	r3, #1
 8002034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	e012      	b.n	800206a <HAL_I2C_Init+0x18e>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1e58      	subs	r0, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	0099      	lsls	r1, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	fbb0 f3f3 	udiv	r3, r0, r3
 800205a:	3301      	adds	r3, #1
 800205c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Init+0x196>
 800206e:	2301      	movs	r3, #1
 8002070:	e022      	b.n	80020b8 <HAL_I2C_Init+0x1dc>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10e      	bne.n	8002098 <HAL_I2C_Init+0x1bc>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1e58      	subs	r0, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6859      	ldr	r1, [r3, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	440b      	add	r3, r1
 8002088:	fbb0 f3f3 	udiv	r3, r0, r3
 800208c:	3301      	adds	r3, #1
 800208e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002096:	e00f      	b.n	80020b8 <HAL_I2C_Init+0x1dc>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1e58      	subs	r0, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	0099      	lsls	r1, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	6809      	ldr	r1, [r1, #0]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6911      	ldr	r1, [r2, #16]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68d2      	ldr	r2, [r2, #12]
 80020f2:	4311      	orrs	r1, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	000186a0 	.word	0x000186a0
 8002154:	001e847f 	.word	0x001e847f
 8002158:	003d08ff 	.word	0x003d08ff
 800215c:	431bde83 	.word	0x431bde83
 8002160:	10624dd3 	.word	0x10624dd3

08002164 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af02      	add	r7, sp, #8
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	461a      	mov	r2, r3
 8002170:	460b      	mov	r3, r1
 8002172:	817b      	strh	r3, [r7, #10]
 8002174:	4613      	mov	r3, r2
 8002176:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff fbea 	bl	8001950 <HAL_GetTick>
 800217c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b20      	cmp	r3, #32
 8002188:	f040 80e0 	bne.w	800234c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	2319      	movs	r3, #25
 8002192:	2201      	movs	r2, #1
 8002194:	4970      	ldr	r1, [pc, #448]	; (8002358 <HAL_I2C_Master_Transmit+0x1f4>)
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f964 	bl	8002464 <I2C_WaitOnFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021a2:	2302      	movs	r3, #2
 80021a4:	e0d3      	b.n	800234e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_I2C_Master_Transmit+0x50>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e0cc      	b.n	800234e <HAL_I2C_Master_Transmit+0x1ea>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d007      	beq.n	80021da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2221      	movs	r2, #33	; 0x21
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2210      	movs	r2, #16
 80021f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	893a      	ldrh	r2, [r7, #8]
 800220a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4a50      	ldr	r2, [pc, #320]	; (800235c <HAL_I2C_Master_Transmit+0x1f8>)
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800221c:	8979      	ldrh	r1, [r7, #10]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	6a3a      	ldr	r2, [r7, #32]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f89c 	bl	8002360 <I2C_MasterRequestWrite>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e08d      	b.n	800234e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002248:	e066      	b.n	8002318 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	6a39      	ldr	r1, [r7, #32]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fa22 	bl	8002698 <I2C_WaitOnTXEFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00d      	beq.n	8002276 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2b04      	cmp	r3, #4
 8002260:	d107      	bne.n	8002272 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002270:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e06b      	b.n	800234e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d11b      	bne.n	80022ec <HAL_I2C_Master_Transmit+0x188>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d017      	beq.n	80022ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	6a39      	ldr	r1, [r7, #32]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fa19 	bl	8002728 <I2C_WaitOnBTFFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	2b04      	cmp	r3, #4
 8002302:	d107      	bne.n	8002314 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002312:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e01a      	b.n	800234e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	d194      	bne.n	800224a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
  }
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	00100002 	.word	0x00100002
 800235c:	ffff0000 	.word	0xffff0000

08002360 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	460b      	mov	r3, r1
 800236e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b08      	cmp	r3, #8
 800237a:	d006      	beq.n	800238a <I2C_MasterRequestWrite+0x2a>
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d003      	beq.n	800238a <I2C_MasterRequestWrite+0x2a>
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002388:	d108      	bne.n	800239c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e00b      	b.n	80023b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	2b12      	cmp	r3, #18
 80023a2:	d107      	bne.n	80023b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f84f 	bl	8002464 <I2C_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00d      	beq.n	80023e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023da:	d103      	bne.n	80023e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e035      	b.n	8002454 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023f0:	d108      	bne.n	8002404 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023f2:	897b      	ldrh	r3, [r7, #10]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002400:	611a      	str	r2, [r3, #16]
 8002402:	e01b      	b.n	800243c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002404:	897b      	ldrh	r3, [r7, #10]
 8002406:	11db      	asrs	r3, r3, #7
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f003 0306 	and.w	r3, r3, #6
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f063 030f 	orn	r3, r3, #15
 8002414:	b2da      	uxtb	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	490e      	ldr	r1, [pc, #56]	; (800245c <I2C_MasterRequestWrite+0xfc>)
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f898 	bl	8002558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e010      	b.n	8002454 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002432:	897b      	ldrh	r3, [r7, #10]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4907      	ldr	r1, [pc, #28]	; (8002460 <I2C_MasterRequestWrite+0x100>)
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f888 	bl	8002558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	00010008 	.word	0x00010008
 8002460:	00010002 	.word	0x00010002

08002464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002474:	e048      	b.n	8002508 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d044      	beq.n	8002508 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247e:	f7ff fa67 	bl	8001950 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d302      	bcc.n	8002494 <I2C_WaitOnFlagUntilTimeout+0x30>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d139      	bne.n	8002508 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10d      	bne.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	e00c      	b.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	43da      	mvns	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d116      	bne.n	8002508 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e023      	b.n	8002550 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	0c1b      	lsrs	r3, r3, #16
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10d      	bne.n	800252e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	43da      	mvns	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4013      	ands	r3, r2
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	e00c      	b.n	8002548 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	43da      	mvns	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4013      	ands	r3, r2
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	429a      	cmp	r2, r3
 800254c:	d093      	beq.n	8002476 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002566:	e071      	b.n	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002576:	d123      	bne.n	80025c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002586:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002590:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f043 0204 	orr.w	r2, r3, #4
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e067      	b.n	8002690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d041      	beq.n	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c8:	f7ff f9c2 	bl	8001950 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d302      	bcc.n	80025de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d136      	bne.n	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d10c      	bne.n	8002602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4013      	ands	r3, r2
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bf14      	ite	ne
 80025fa:	2301      	movne	r3, #1
 80025fc:	2300      	moveq	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	e00b      	b.n	800261a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	43da      	mvns	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4013      	ands	r3, r2
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e021      	b.n	8002690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10c      	bne.n	8002670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	43da      	mvns	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4013      	ands	r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e00b      	b.n	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4013      	ands	r3, r2
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	bf14      	ite	ne
 8002682:	2301      	movne	r3, #1
 8002684:	2300      	moveq	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f af6d 	bne.w	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026a4:	e034      	b.n	8002710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f886 	bl	80027b8 <I2C_IsAcknowledgeFailed>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e034      	b.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d028      	beq.n	8002710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026be:	f7ff f947 	bl	8001950 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d11d      	bne.n	8002710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	2b80      	cmp	r3, #128	; 0x80
 80026e0:	d016      	beq.n	8002710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e007      	b.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b80      	cmp	r3, #128	; 0x80
 800271c:	d1c3      	bne.n	80026a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002734:	e034      	b.n	80027a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f83e 	bl	80027b8 <I2C_IsAcknowledgeFailed>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e034      	b.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d028      	beq.n	80027a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7ff f8ff 	bl	8001950 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d11d      	bne.n	80027a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b04      	cmp	r3, #4
 8002770:	d016      	beq.n	80027a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f043 0220 	orr.w	r2, r3, #32
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e007      	b.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d1c3      	bne.n	8002736 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ce:	d11b      	bne.n	8002808 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f043 0204 	orr.w	r2, r3, #4
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e272      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8087 	beq.w	8002942 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002834:	4b92      	ldr	r3, [pc, #584]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b04      	cmp	r3, #4
 800283e:	d00c      	beq.n	800285a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002840:	4b8f      	ldr	r3, [pc, #572]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b08      	cmp	r3, #8
 800284a:	d112      	bne.n	8002872 <HAL_RCC_OscConfig+0x5e>
 800284c:	4b8c      	ldr	r3, [pc, #560]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002858:	d10b      	bne.n	8002872 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285a:	4b89      	ldr	r3, [pc, #548]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d06c      	beq.n	8002940 <HAL_RCC_OscConfig+0x12c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d168      	bne.n	8002940 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e24c      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x76>
 800287c:	4b80      	ldr	r3, [pc, #512]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a7f      	ldr	r2, [pc, #508]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e02e      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x98>
 8002892:	4b7b      	ldr	r3, [pc, #492]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a7a      	ldr	r2, [pc, #488]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b78      	ldr	r3, [pc, #480]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a77      	ldr	r2, [pc, #476]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e01d      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0xbc>
 80028b6:	4b72      	ldr	r3, [pc, #456]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a71      	ldr	r2, [pc, #452]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b6f      	ldr	r3, [pc, #444]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6e      	ldr	r2, [pc, #440]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e00b      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 80028d0:	4b6b      	ldr	r3, [pc, #428]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a6a      	ldr	r2, [pc, #424]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b68      	ldr	r3, [pc, #416]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a67      	ldr	r2, [pc, #412]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7ff f82e 	bl	8001950 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7ff f82a 	bl	8001950 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e200      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0xe4>
 8002916:	e014      	b.n	8002942 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff f81a 	bl	8001950 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7ff f816 	bl	8001950 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1ec      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x10c>
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d063      	beq.n	8002a16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800294e:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800295a:	4b49      	ldr	r3, [pc, #292]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b08      	cmp	r3, #8
 8002964:	d11c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x18c>
 8002966:	4b46      	ldr	r3, [pc, #280]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d116      	bne.n	80029a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_RCC_OscConfig+0x176>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d001      	beq.n	800298a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e1c0      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4939      	ldr	r1, [pc, #228]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299e:	e03a      	b.n	8002a16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a8:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fe ffcf 	bl	8001950 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b6:	f7fe ffcb 	bl	8001950 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e1a1      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4927      	ldr	r1, [pc, #156]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]
 80029e8:	e015      	b.n	8002a16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fe ffae 	bl	8001950 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f8:	f7fe ffaa 	bl	8001950 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e180      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d03a      	beq.n	8002a98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d019      	beq.n	8002a5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a30:	f7fe ff8e 	bl	8001950 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a38:	f7fe ff8a 	bl	8001950 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e160      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a56:	2001      	movs	r0, #1
 8002a58:	f000 faba 	bl	8002fd0 <RCC_Delay>
 8002a5c:	e01c      	b.n	8002a98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_RCC_OscConfig+0x274>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a64:	f7fe ff74 	bl	8001950 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6a:	e00f      	b.n	8002a8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6c:	f7fe ff70 	bl	8001950 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d908      	bls.n	8002a8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e146      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	42420000 	.word	0x42420000
 8002a88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	4b92      	ldr	r3, [pc, #584]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e9      	bne.n	8002a6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80a6 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4a87      	ldr	r2, [pc, #540]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	61d3      	str	r3, [r2, #28]
 8002ac2:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b82      	ldr	r3, [pc, #520]	; (8002cdc <HAL_RCC_OscConfig+0x4c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d118      	bne.n	8002b10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ade:	4b7f      	ldr	r3, [pc, #508]	; (8002cdc <HAL_RCC_OscConfig+0x4c8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7e      	ldr	r2, [pc, #504]	; (8002cdc <HAL_RCC_OscConfig+0x4c8>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aea:	f7fe ff31 	bl	8001950 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af2:	f7fe ff2d 	bl	8001950 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	; 0x64
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e103      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b75      	ldr	r3, [pc, #468]	; (8002cdc <HAL_RCC_OscConfig+0x4c8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x312>
 8002b18:	4b6f      	ldr	r3, [pc, #444]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4a6e      	ldr	r2, [pc, #440]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6213      	str	r3, [r2, #32]
 8002b24:	e02d      	b.n	8002b82 <HAL_RCC_OscConfig+0x36e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x334>
 8002b2e:	4b6a      	ldr	r3, [pc, #424]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a69      	ldr	r2, [pc, #420]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	4b67      	ldr	r3, [pc, #412]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4a66      	ldr	r2, [pc, #408]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	6213      	str	r3, [r2, #32]
 8002b46:	e01c      	b.n	8002b82 <HAL_RCC_OscConfig+0x36e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCC_OscConfig+0x356>
 8002b50:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4a60      	ldr	r2, [pc, #384]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	6213      	str	r3, [r2, #32]
 8002b5c:	4b5e      	ldr	r3, [pc, #376]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4a5d      	ldr	r2, [pc, #372]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6213      	str	r3, [r2, #32]
 8002b68:	e00b      	b.n	8002b82 <HAL_RCC_OscConfig+0x36e>
 8002b6a:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a5a      	ldr	r2, [pc, #360]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6213      	str	r3, [r2, #32]
 8002b76:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4a57      	ldr	r2, [pc, #348]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	f023 0304 	bic.w	r3, r3, #4
 8002b80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d015      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fee1 	bl	8001950 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b90:	e00a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b92:	f7fe fedd 	bl	8001950 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e0b1      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba8:	4b4b      	ldr	r3, [pc, #300]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ee      	beq.n	8002b92 <HAL_RCC_OscConfig+0x37e>
 8002bb4:	e014      	b.n	8002be0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe fecb 	bl	8001950 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7fe fec7 	bl	8001950 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e09b      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd4:	4b40      	ldr	r3, [pc, #256]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1ee      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d105      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be6:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4a3b      	ldr	r2, [pc, #236]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8087 	beq.w	8002d0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bfc:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d061      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d146      	bne.n	8002c9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c10:	4b33      	ldr	r3, [pc, #204]	; (8002ce0 <HAL_RCC_OscConfig+0x4cc>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7fe fe9b 	bl	8001950 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7fe fe97 	bl	8001950 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e06d      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c30:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c46:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4921      	ldr	r1, [pc, #132]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c58:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a19      	ldr	r1, [r3, #32]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	491b      	ldr	r1, [pc, #108]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x4cc>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe fe6b 	bl	8001950 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe fe67 	bl	8001950 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e03d      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x46a>
 8002c9c:	e035      	b.n	8002d0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_RCC_OscConfig+0x4cc>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fe54 	bl	8001950 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe fe50 	bl	8001950 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e026      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x498>
 8002cca:	e01e      	b.n	8002d0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e019      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_OscConfig+0x500>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000

08002d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0d0      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d910      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b67      	ldr	r3, [pc, #412]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 0207 	bic.w	r2, r3, #7
 8002d42:	4965      	ldr	r1, [pc, #404]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b63      	ldr	r3, [pc, #396]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0b8      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d74:	4b59      	ldr	r3, [pc, #356]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a58      	ldr	r2, [pc, #352]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d8c:	4b53      	ldr	r3, [pc, #332]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a52      	ldr	r2, [pc, #328]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d98:	4b50      	ldr	r3, [pc, #320]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	494d      	ldr	r1, [pc, #308]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d040      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d115      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e07f      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e073      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e06b      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df6:	4b39      	ldr	r3, [pc, #228]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4936      	ldr	r1, [pc, #216]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e08:	f7fe fda2 	bl	8001950 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e10:	f7fe fd9e 	bl	8001950 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e053      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 020c 	and.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1eb      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e38:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d210      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 0207 	bic.w	r2, r3, #7
 8002e4e:	4922      	ldr	r1, [pc, #136]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e032      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4916      	ldr	r1, [pc, #88]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	490e      	ldr	r1, [pc, #56]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ea6:	f000 f821 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	490a      	ldr	r1, [pc, #40]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb8:	5ccb      	ldrb	r3, [r1, r3]
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fd00 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	08003f30 	.word	0x08003f30
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	20000004 	.word	0x20000004

08002eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	2300      	movs	r3, #0
 8002f00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f06:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d002      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x30>
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0x36>
 8002f1a:	e027      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f1e:	613b      	str	r3, [r7, #16]
      break;
 8002f20:	e027      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	0c9b      	lsrs	r3, r3, #18
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
 8002f2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	0c5b      	lsrs	r3, r3, #17
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a0d      	ldr	r2, [pc, #52]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f4e:	fb03 f202 	mul.w	r2, r3, r2
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e004      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	613b      	str	r3, [r7, #16]
      break;
 8002f6a:	e002      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f6e:	613b      	str	r3, [r7, #16]
      break;
 8002f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f72:	693b      	ldr	r3, [r7, #16]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	007a1200 	.word	0x007a1200
 8002f88:	08003f48 	.word	0x08003f48
 8002f8c:	08003f58 	.word	0x08003f58
 8002f90:	003d0900 	.word	0x003d0900

08002f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f98:	4b02      	ldr	r3, [pc, #8]	; (8002fa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	20000000 	.word	0x20000000

08002fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fac:	f7ff fff2 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	4903      	ldr	r1, [pc, #12]	; (8002fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08003f40 	.word	0x08003f40

08002fd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <RCC_Delay+0x34>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <RCC_Delay+0x38>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	0a5b      	lsrs	r3, r3, #9
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fec:	bf00      	nop
  }
  while (Delay --);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	60fa      	str	r2, [r7, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f9      	bne.n	8002fec <RCC_Delay+0x1c>
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	20000000 	.word	0x20000000
 8003008:	10624dd3 	.word	0x10624dd3

0800300c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e041      	b.n	80030a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fe fb8c 	bl	8001750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f000 f940 	bl	80032d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d001      	beq.n	80030c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e032      	b.n	800312a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a18      	ldr	r2, [pc, #96]	; (8003134 <HAL_TIM_Base_Start+0x88>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00e      	beq.n	80030f4 <HAL_TIM_Base_Start+0x48>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030de:	d009      	beq.n	80030f4 <HAL_TIM_Base_Start+0x48>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a14      	ldr	r2, [pc, #80]	; (8003138 <HAL_TIM_Base_Start+0x8c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d004      	beq.n	80030f4 <HAL_TIM_Base_Start+0x48>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a13      	ldr	r2, [pc, #76]	; (800313c <HAL_TIM_Base_Start+0x90>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d111      	bne.n	8003118 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b06      	cmp	r3, #6
 8003104:	d010      	beq.n	8003128 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003116:	e007      	b.n	8003128 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	40012c00 	.word	0x40012c00
 8003138:	40000400 	.word	0x40000400
 800313c:	40000800 	.word	0x40000800

08003140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_TIM_ConfigClockSource+0x1c>
 8003158:	2302      	movs	r3, #2
 800315a:	e0b4      	b.n	80032c6 <HAL_TIM_ConfigClockSource+0x186>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800317a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003194:	d03e      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0xd4>
 8003196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319a:	f200 8087 	bhi.w	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a2:	f000 8086 	beq.w	80032b2 <HAL_TIM_ConfigClockSource+0x172>
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	d87f      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b70      	cmp	r3, #112	; 0x70
 80031ae:	d01a      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0xa6>
 80031b0:	2b70      	cmp	r3, #112	; 0x70
 80031b2:	d87b      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b60      	cmp	r3, #96	; 0x60
 80031b6:	d050      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x11a>
 80031b8:	2b60      	cmp	r3, #96	; 0x60
 80031ba:	d877      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b50      	cmp	r3, #80	; 0x50
 80031be:	d03c      	beq.n	800323a <HAL_TIM_ConfigClockSource+0xfa>
 80031c0:	2b50      	cmp	r3, #80	; 0x50
 80031c2:	d873      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d058      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x13a>
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d86f      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b30      	cmp	r3, #48	; 0x30
 80031ce:	d064      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x15a>
 80031d0:	2b30      	cmp	r3, #48	; 0x30
 80031d2:	d86b      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d060      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x15a>
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d867      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d05c      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x15a>
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d05a      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x15a>
 80031e4:	e062      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031f6:	f000 f944 	bl	8003482 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	609a      	str	r2, [r3, #8]
      break;
 8003212:	e04f      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003224:	f000 f92d 	bl	8003482 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003236:	609a      	str	r2, [r3, #8]
      break;
 8003238:	e03c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003246:	461a      	mov	r2, r3
 8003248:	f000 f8a4 	bl	8003394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2150      	movs	r1, #80	; 0x50
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f8fb 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 8003258:	e02c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003266:	461a      	mov	r2, r3
 8003268:	f000 f8c2 	bl	80033f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2160      	movs	r1, #96	; 0x60
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f8eb 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 8003278:	e01c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003286:	461a      	mov	r2, r3
 8003288:	f000 f884 	bl	8003394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2140      	movs	r1, #64	; 0x40
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f8db 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 8003298:	e00c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4619      	mov	r1, r3
 80032a4:	4610      	mov	r0, r2
 80032a6:	f000 f8d2 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 80032aa:	e003      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
      break;
 80032b0:	e000      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a29      	ldr	r2, [pc, #164]	; (8003388 <TIM_Base_SetConfig+0xb8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00b      	beq.n	8003300 <TIM_Base_SetConfig+0x30>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ee:	d007      	beq.n	8003300 <TIM_Base_SetConfig+0x30>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a26      	ldr	r2, [pc, #152]	; (800338c <TIM_Base_SetConfig+0xbc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0x30>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a25      	ldr	r2, [pc, #148]	; (8003390 <TIM_Base_SetConfig+0xc0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a1c      	ldr	r2, [pc, #112]	; (8003388 <TIM_Base_SetConfig+0xb8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00b      	beq.n	8003332 <TIM_Base_SetConfig+0x62>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d007      	beq.n	8003332 <TIM_Base_SetConfig+0x62>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a19      	ldr	r2, [pc, #100]	; (800338c <TIM_Base_SetConfig+0xbc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_Base_SetConfig+0x62>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a18      	ldr	r2, [pc, #96]	; (8003390 <TIM_Base_SetConfig+0xc0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d108      	bne.n	8003344 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a07      	ldr	r2, [pc, #28]	; (8003388 <TIM_Base_SetConfig+0xb8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d103      	bne.n	8003378 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	615a      	str	r2, [r3, #20]
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800

08003394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f023 0201 	bic.w	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 030a 	bic.w	r3, r3, #10
 80033d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f023 0210 	bic.w	r2, r3, #16
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800341a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	031b      	lsls	r3, r3, #12
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800342c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	621a      	str	r2, [r3, #32]
}
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	f043 0307 	orr.w	r3, r3, #7
 8003470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	609a      	str	r2, [r3, #8]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003482:	b480      	push	{r7}
 8003484:	b087      	sub	sp, #28
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800349c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	021a      	lsls	r2, r3, #8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	609a      	str	r2, [r3, #8]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e046      	b.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a16      	ldr	r2, [pc, #88]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00e      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003524:	d009      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a12      	ldr	r2, [pc, #72]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d004      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a10      	ldr	r2, [pc, #64]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10c      	bne.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	4313      	orrs	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800

0800357c <siprintf>:
 800357c:	b40e      	push	{r1, r2, r3}
 800357e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003582:	b500      	push	{lr}
 8003584:	b09c      	sub	sp, #112	; 0x70
 8003586:	ab1d      	add	r3, sp, #116	; 0x74
 8003588:	9002      	str	r0, [sp, #8]
 800358a:	9006      	str	r0, [sp, #24]
 800358c:	9107      	str	r1, [sp, #28]
 800358e:	9104      	str	r1, [sp, #16]
 8003590:	4808      	ldr	r0, [pc, #32]	; (80035b4 <siprintf+0x38>)
 8003592:	4909      	ldr	r1, [pc, #36]	; (80035b8 <siprintf+0x3c>)
 8003594:	f853 2b04 	ldr.w	r2, [r3], #4
 8003598:	9105      	str	r1, [sp, #20]
 800359a:	6800      	ldr	r0, [r0, #0]
 800359c:	a902      	add	r1, sp, #8
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	f000 f98e 	bl	80038c0 <_svfiprintf_r>
 80035a4:	2200      	movs	r2, #0
 80035a6:	9b02      	ldr	r3, [sp, #8]
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	b01c      	add	sp, #112	; 0x70
 80035ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80035b0:	b003      	add	sp, #12
 80035b2:	4770      	bx	lr
 80035b4:	20000058 	.word	0x20000058
 80035b8:	ffff0208 	.word	0xffff0208

080035bc <memset>:
 80035bc:	4603      	mov	r3, r0
 80035be:	4402      	add	r2, r0
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d100      	bne.n	80035c6 <memset+0xa>
 80035c4:	4770      	bx	lr
 80035c6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ca:	e7f9      	b.n	80035c0 <memset+0x4>

080035cc <__errno>:
 80035cc:	4b01      	ldr	r3, [pc, #4]	; (80035d4 <__errno+0x8>)
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000058 	.word	0x20000058

080035d8 <__libc_init_array>:
 80035d8:	b570      	push	{r4, r5, r6, lr}
 80035da:	2600      	movs	r6, #0
 80035dc:	4d0c      	ldr	r5, [pc, #48]	; (8003610 <__libc_init_array+0x38>)
 80035de:	4c0d      	ldr	r4, [pc, #52]	; (8003614 <__libc_init_array+0x3c>)
 80035e0:	1b64      	subs	r4, r4, r5
 80035e2:	10a4      	asrs	r4, r4, #2
 80035e4:	42a6      	cmp	r6, r4
 80035e6:	d109      	bne.n	80035fc <__libc_init_array+0x24>
 80035e8:	f000 fc7a 	bl	8003ee0 <_init>
 80035ec:	2600      	movs	r6, #0
 80035ee:	4d0a      	ldr	r5, [pc, #40]	; (8003618 <__libc_init_array+0x40>)
 80035f0:	4c0a      	ldr	r4, [pc, #40]	; (800361c <__libc_init_array+0x44>)
 80035f2:	1b64      	subs	r4, r4, r5
 80035f4:	10a4      	asrs	r4, r4, #2
 80035f6:	42a6      	cmp	r6, r4
 80035f8:	d105      	bne.n	8003606 <__libc_init_array+0x2e>
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003600:	4798      	blx	r3
 8003602:	3601      	adds	r6, #1
 8003604:	e7ee      	b.n	80035e4 <__libc_init_array+0xc>
 8003606:	f855 3b04 	ldr.w	r3, [r5], #4
 800360a:	4798      	blx	r3
 800360c:	3601      	adds	r6, #1
 800360e:	e7f2      	b.n	80035f6 <__libc_init_array+0x1e>
 8003610:	08003f90 	.word	0x08003f90
 8003614:	08003f90 	.word	0x08003f90
 8003618:	08003f90 	.word	0x08003f90
 800361c:	08003f94 	.word	0x08003f94

08003620 <__retarget_lock_acquire_recursive>:
 8003620:	4770      	bx	lr

08003622 <__retarget_lock_release_recursive>:
 8003622:	4770      	bx	lr

08003624 <_free_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4605      	mov	r5, r0
 8003628:	2900      	cmp	r1, #0
 800362a:	d040      	beq.n	80036ae <_free_r+0x8a>
 800362c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003630:	1f0c      	subs	r4, r1, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	bfb8      	it	lt
 8003636:	18e4      	addlt	r4, r4, r3
 8003638:	f000 f8dc 	bl	80037f4 <__malloc_lock>
 800363c:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <_free_r+0x8c>)
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	b933      	cbnz	r3, 8003650 <_free_r+0x2c>
 8003642:	6063      	str	r3, [r4, #4]
 8003644:	6014      	str	r4, [r2, #0]
 8003646:	4628      	mov	r0, r5
 8003648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800364c:	f000 b8d8 	b.w	8003800 <__malloc_unlock>
 8003650:	42a3      	cmp	r3, r4
 8003652:	d908      	bls.n	8003666 <_free_r+0x42>
 8003654:	6820      	ldr	r0, [r4, #0]
 8003656:	1821      	adds	r1, r4, r0
 8003658:	428b      	cmp	r3, r1
 800365a:	bf01      	itttt	eq
 800365c:	6819      	ldreq	r1, [r3, #0]
 800365e:	685b      	ldreq	r3, [r3, #4]
 8003660:	1809      	addeq	r1, r1, r0
 8003662:	6021      	streq	r1, [r4, #0]
 8003664:	e7ed      	b.n	8003642 <_free_r+0x1e>
 8003666:	461a      	mov	r2, r3
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	b10b      	cbz	r3, 8003670 <_free_r+0x4c>
 800366c:	42a3      	cmp	r3, r4
 800366e:	d9fa      	bls.n	8003666 <_free_r+0x42>
 8003670:	6811      	ldr	r1, [r2, #0]
 8003672:	1850      	adds	r0, r2, r1
 8003674:	42a0      	cmp	r0, r4
 8003676:	d10b      	bne.n	8003690 <_free_r+0x6c>
 8003678:	6820      	ldr	r0, [r4, #0]
 800367a:	4401      	add	r1, r0
 800367c:	1850      	adds	r0, r2, r1
 800367e:	4283      	cmp	r3, r0
 8003680:	6011      	str	r1, [r2, #0]
 8003682:	d1e0      	bne.n	8003646 <_free_r+0x22>
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4408      	add	r0, r1
 800368a:	6010      	str	r0, [r2, #0]
 800368c:	6053      	str	r3, [r2, #4]
 800368e:	e7da      	b.n	8003646 <_free_r+0x22>
 8003690:	d902      	bls.n	8003698 <_free_r+0x74>
 8003692:	230c      	movs	r3, #12
 8003694:	602b      	str	r3, [r5, #0]
 8003696:	e7d6      	b.n	8003646 <_free_r+0x22>
 8003698:	6820      	ldr	r0, [r4, #0]
 800369a:	1821      	adds	r1, r4, r0
 800369c:	428b      	cmp	r3, r1
 800369e:	bf01      	itttt	eq
 80036a0:	6819      	ldreq	r1, [r3, #0]
 80036a2:	685b      	ldreq	r3, [r3, #4]
 80036a4:	1809      	addeq	r1, r1, r0
 80036a6:	6021      	streq	r1, [r4, #0]
 80036a8:	6063      	str	r3, [r4, #4]
 80036aa:	6054      	str	r4, [r2, #4]
 80036ac:	e7cb      	b.n	8003646 <_free_r+0x22>
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	200002c8 	.word	0x200002c8

080036b4 <sbrk_aligned>:
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	4e0e      	ldr	r6, [pc, #56]	; (80036f0 <sbrk_aligned+0x3c>)
 80036b8:	460c      	mov	r4, r1
 80036ba:	6831      	ldr	r1, [r6, #0]
 80036bc:	4605      	mov	r5, r0
 80036be:	b911      	cbnz	r1, 80036c6 <sbrk_aligned+0x12>
 80036c0:	f000 fbaa 	bl	8003e18 <_sbrk_r>
 80036c4:	6030      	str	r0, [r6, #0]
 80036c6:	4621      	mov	r1, r4
 80036c8:	4628      	mov	r0, r5
 80036ca:	f000 fba5 	bl	8003e18 <_sbrk_r>
 80036ce:	1c43      	adds	r3, r0, #1
 80036d0:	d00a      	beq.n	80036e8 <sbrk_aligned+0x34>
 80036d2:	1cc4      	adds	r4, r0, #3
 80036d4:	f024 0403 	bic.w	r4, r4, #3
 80036d8:	42a0      	cmp	r0, r4
 80036da:	d007      	beq.n	80036ec <sbrk_aligned+0x38>
 80036dc:	1a21      	subs	r1, r4, r0
 80036de:	4628      	mov	r0, r5
 80036e0:	f000 fb9a 	bl	8003e18 <_sbrk_r>
 80036e4:	3001      	adds	r0, #1
 80036e6:	d101      	bne.n	80036ec <sbrk_aligned+0x38>
 80036e8:	f04f 34ff 	mov.w	r4, #4294967295
 80036ec:	4620      	mov	r0, r4
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
 80036f0:	200002cc 	.word	0x200002cc

080036f4 <_malloc_r>:
 80036f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f8:	1ccd      	adds	r5, r1, #3
 80036fa:	f025 0503 	bic.w	r5, r5, #3
 80036fe:	3508      	adds	r5, #8
 8003700:	2d0c      	cmp	r5, #12
 8003702:	bf38      	it	cc
 8003704:	250c      	movcc	r5, #12
 8003706:	2d00      	cmp	r5, #0
 8003708:	4607      	mov	r7, r0
 800370a:	db01      	blt.n	8003710 <_malloc_r+0x1c>
 800370c:	42a9      	cmp	r1, r5
 800370e:	d905      	bls.n	800371c <_malloc_r+0x28>
 8003710:	230c      	movs	r3, #12
 8003712:	2600      	movs	r6, #0
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	4630      	mov	r0, r6
 8003718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800371c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037f0 <_malloc_r+0xfc>
 8003720:	f000 f868 	bl	80037f4 <__malloc_lock>
 8003724:	f8d8 3000 	ldr.w	r3, [r8]
 8003728:	461c      	mov	r4, r3
 800372a:	bb5c      	cbnz	r4, 8003784 <_malloc_r+0x90>
 800372c:	4629      	mov	r1, r5
 800372e:	4638      	mov	r0, r7
 8003730:	f7ff ffc0 	bl	80036b4 <sbrk_aligned>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	4604      	mov	r4, r0
 8003738:	d155      	bne.n	80037e6 <_malloc_r+0xf2>
 800373a:	f8d8 4000 	ldr.w	r4, [r8]
 800373e:	4626      	mov	r6, r4
 8003740:	2e00      	cmp	r6, #0
 8003742:	d145      	bne.n	80037d0 <_malloc_r+0xdc>
 8003744:	2c00      	cmp	r4, #0
 8003746:	d048      	beq.n	80037da <_malloc_r+0xe6>
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	4631      	mov	r1, r6
 800374c:	4638      	mov	r0, r7
 800374e:	eb04 0903 	add.w	r9, r4, r3
 8003752:	f000 fb61 	bl	8003e18 <_sbrk_r>
 8003756:	4581      	cmp	r9, r0
 8003758:	d13f      	bne.n	80037da <_malloc_r+0xe6>
 800375a:	6821      	ldr	r1, [r4, #0]
 800375c:	4638      	mov	r0, r7
 800375e:	1a6d      	subs	r5, r5, r1
 8003760:	4629      	mov	r1, r5
 8003762:	f7ff ffa7 	bl	80036b4 <sbrk_aligned>
 8003766:	3001      	adds	r0, #1
 8003768:	d037      	beq.n	80037da <_malloc_r+0xe6>
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	442b      	add	r3, r5
 800376e:	6023      	str	r3, [r4, #0]
 8003770:	f8d8 3000 	ldr.w	r3, [r8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d038      	beq.n	80037ea <_malloc_r+0xf6>
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	42a2      	cmp	r2, r4
 800377c:	d12b      	bne.n	80037d6 <_malloc_r+0xe2>
 800377e:	2200      	movs	r2, #0
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	e00f      	b.n	80037a4 <_malloc_r+0xb0>
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	1b52      	subs	r2, r2, r5
 8003788:	d41f      	bmi.n	80037ca <_malloc_r+0xd6>
 800378a:	2a0b      	cmp	r2, #11
 800378c:	d917      	bls.n	80037be <_malloc_r+0xca>
 800378e:	1961      	adds	r1, r4, r5
 8003790:	42a3      	cmp	r3, r4
 8003792:	6025      	str	r5, [r4, #0]
 8003794:	bf18      	it	ne
 8003796:	6059      	strne	r1, [r3, #4]
 8003798:	6863      	ldr	r3, [r4, #4]
 800379a:	bf08      	it	eq
 800379c:	f8c8 1000 	streq.w	r1, [r8]
 80037a0:	5162      	str	r2, [r4, r5]
 80037a2:	604b      	str	r3, [r1, #4]
 80037a4:	4638      	mov	r0, r7
 80037a6:	f104 060b 	add.w	r6, r4, #11
 80037aa:	f000 f829 	bl	8003800 <__malloc_unlock>
 80037ae:	f026 0607 	bic.w	r6, r6, #7
 80037b2:	1d23      	adds	r3, r4, #4
 80037b4:	1af2      	subs	r2, r6, r3
 80037b6:	d0ae      	beq.n	8003716 <_malloc_r+0x22>
 80037b8:	1b9b      	subs	r3, r3, r6
 80037ba:	50a3      	str	r3, [r4, r2]
 80037bc:	e7ab      	b.n	8003716 <_malloc_r+0x22>
 80037be:	42a3      	cmp	r3, r4
 80037c0:	6862      	ldr	r2, [r4, #4]
 80037c2:	d1dd      	bne.n	8003780 <_malloc_r+0x8c>
 80037c4:	f8c8 2000 	str.w	r2, [r8]
 80037c8:	e7ec      	b.n	80037a4 <_malloc_r+0xb0>
 80037ca:	4623      	mov	r3, r4
 80037cc:	6864      	ldr	r4, [r4, #4]
 80037ce:	e7ac      	b.n	800372a <_malloc_r+0x36>
 80037d0:	4634      	mov	r4, r6
 80037d2:	6876      	ldr	r6, [r6, #4]
 80037d4:	e7b4      	b.n	8003740 <_malloc_r+0x4c>
 80037d6:	4613      	mov	r3, r2
 80037d8:	e7cc      	b.n	8003774 <_malloc_r+0x80>
 80037da:	230c      	movs	r3, #12
 80037dc:	4638      	mov	r0, r7
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	f000 f80e 	bl	8003800 <__malloc_unlock>
 80037e4:	e797      	b.n	8003716 <_malloc_r+0x22>
 80037e6:	6025      	str	r5, [r4, #0]
 80037e8:	e7dc      	b.n	80037a4 <_malloc_r+0xb0>
 80037ea:	605b      	str	r3, [r3, #4]
 80037ec:	deff      	udf	#255	; 0xff
 80037ee:	bf00      	nop
 80037f0:	200002c8 	.word	0x200002c8

080037f4 <__malloc_lock>:
 80037f4:	4801      	ldr	r0, [pc, #4]	; (80037fc <__malloc_lock+0x8>)
 80037f6:	f7ff bf13 	b.w	8003620 <__retarget_lock_acquire_recursive>
 80037fa:	bf00      	nop
 80037fc:	200002c4 	.word	0x200002c4

08003800 <__malloc_unlock>:
 8003800:	4801      	ldr	r0, [pc, #4]	; (8003808 <__malloc_unlock+0x8>)
 8003802:	f7ff bf0e 	b.w	8003622 <__retarget_lock_release_recursive>
 8003806:	bf00      	nop
 8003808:	200002c4 	.word	0x200002c4

0800380c <__ssputs_r>:
 800380c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003810:	461f      	mov	r7, r3
 8003812:	688e      	ldr	r6, [r1, #8]
 8003814:	4682      	mov	sl, r0
 8003816:	42be      	cmp	r6, r7
 8003818:	460c      	mov	r4, r1
 800381a:	4690      	mov	r8, r2
 800381c:	680b      	ldr	r3, [r1, #0]
 800381e:	d82c      	bhi.n	800387a <__ssputs_r+0x6e>
 8003820:	898a      	ldrh	r2, [r1, #12]
 8003822:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003826:	d026      	beq.n	8003876 <__ssputs_r+0x6a>
 8003828:	6965      	ldr	r5, [r4, #20]
 800382a:	6909      	ldr	r1, [r1, #16]
 800382c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003830:	eba3 0901 	sub.w	r9, r3, r1
 8003834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003838:	1c7b      	adds	r3, r7, #1
 800383a:	444b      	add	r3, r9
 800383c:	106d      	asrs	r5, r5, #1
 800383e:	429d      	cmp	r5, r3
 8003840:	bf38      	it	cc
 8003842:	461d      	movcc	r5, r3
 8003844:	0553      	lsls	r3, r2, #21
 8003846:	d527      	bpl.n	8003898 <__ssputs_r+0x8c>
 8003848:	4629      	mov	r1, r5
 800384a:	f7ff ff53 	bl	80036f4 <_malloc_r>
 800384e:	4606      	mov	r6, r0
 8003850:	b360      	cbz	r0, 80038ac <__ssputs_r+0xa0>
 8003852:	464a      	mov	r2, r9
 8003854:	6921      	ldr	r1, [r4, #16]
 8003856:	f000 fafd 	bl	8003e54 <memcpy>
 800385a:	89a3      	ldrh	r3, [r4, #12]
 800385c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003864:	81a3      	strh	r3, [r4, #12]
 8003866:	6126      	str	r6, [r4, #16]
 8003868:	444e      	add	r6, r9
 800386a:	6026      	str	r6, [r4, #0]
 800386c:	463e      	mov	r6, r7
 800386e:	6165      	str	r5, [r4, #20]
 8003870:	eba5 0509 	sub.w	r5, r5, r9
 8003874:	60a5      	str	r5, [r4, #8]
 8003876:	42be      	cmp	r6, r7
 8003878:	d900      	bls.n	800387c <__ssputs_r+0x70>
 800387a:	463e      	mov	r6, r7
 800387c:	4632      	mov	r2, r6
 800387e:	4641      	mov	r1, r8
 8003880:	6820      	ldr	r0, [r4, #0]
 8003882:	f000 faaf 	bl	8003de4 <memmove>
 8003886:	2000      	movs	r0, #0
 8003888:	68a3      	ldr	r3, [r4, #8]
 800388a:	1b9b      	subs	r3, r3, r6
 800388c:	60a3      	str	r3, [r4, #8]
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	4433      	add	r3, r6
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003898:	462a      	mov	r2, r5
 800389a:	f000 fae9 	bl	8003e70 <_realloc_r>
 800389e:	4606      	mov	r6, r0
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d1e0      	bne.n	8003866 <__ssputs_r+0x5a>
 80038a4:	4650      	mov	r0, sl
 80038a6:	6921      	ldr	r1, [r4, #16]
 80038a8:	f7ff febc 	bl	8003624 <_free_r>
 80038ac:	230c      	movs	r3, #12
 80038ae:	f8ca 3000 	str.w	r3, [sl]
 80038b2:	89a3      	ldrh	r3, [r4, #12]
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038bc:	81a3      	strh	r3, [r4, #12]
 80038be:	e7e9      	b.n	8003894 <__ssputs_r+0x88>

080038c0 <_svfiprintf_r>:
 80038c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c4:	4698      	mov	r8, r3
 80038c6:	898b      	ldrh	r3, [r1, #12]
 80038c8:	4607      	mov	r7, r0
 80038ca:	061b      	lsls	r3, r3, #24
 80038cc:	460d      	mov	r5, r1
 80038ce:	4614      	mov	r4, r2
 80038d0:	b09d      	sub	sp, #116	; 0x74
 80038d2:	d50e      	bpl.n	80038f2 <_svfiprintf_r+0x32>
 80038d4:	690b      	ldr	r3, [r1, #16]
 80038d6:	b963      	cbnz	r3, 80038f2 <_svfiprintf_r+0x32>
 80038d8:	2140      	movs	r1, #64	; 0x40
 80038da:	f7ff ff0b 	bl	80036f4 <_malloc_r>
 80038de:	6028      	str	r0, [r5, #0]
 80038e0:	6128      	str	r0, [r5, #16]
 80038e2:	b920      	cbnz	r0, 80038ee <_svfiprintf_r+0x2e>
 80038e4:	230c      	movs	r3, #12
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	e0d0      	b.n	8003a90 <_svfiprintf_r+0x1d0>
 80038ee:	2340      	movs	r3, #64	; 0x40
 80038f0:	616b      	str	r3, [r5, #20]
 80038f2:	2300      	movs	r3, #0
 80038f4:	9309      	str	r3, [sp, #36]	; 0x24
 80038f6:	2320      	movs	r3, #32
 80038f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038fc:	2330      	movs	r3, #48	; 0x30
 80038fe:	f04f 0901 	mov.w	r9, #1
 8003902:	f8cd 800c 	str.w	r8, [sp, #12]
 8003906:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003aa8 <_svfiprintf_r+0x1e8>
 800390a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800390e:	4623      	mov	r3, r4
 8003910:	469a      	mov	sl, r3
 8003912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003916:	b10a      	cbz	r2, 800391c <_svfiprintf_r+0x5c>
 8003918:	2a25      	cmp	r2, #37	; 0x25
 800391a:	d1f9      	bne.n	8003910 <_svfiprintf_r+0x50>
 800391c:	ebba 0b04 	subs.w	fp, sl, r4
 8003920:	d00b      	beq.n	800393a <_svfiprintf_r+0x7a>
 8003922:	465b      	mov	r3, fp
 8003924:	4622      	mov	r2, r4
 8003926:	4629      	mov	r1, r5
 8003928:	4638      	mov	r0, r7
 800392a:	f7ff ff6f 	bl	800380c <__ssputs_r>
 800392e:	3001      	adds	r0, #1
 8003930:	f000 80a9 	beq.w	8003a86 <_svfiprintf_r+0x1c6>
 8003934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003936:	445a      	add	r2, fp
 8003938:	9209      	str	r2, [sp, #36]	; 0x24
 800393a:	f89a 3000 	ldrb.w	r3, [sl]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80a1 	beq.w	8003a86 <_svfiprintf_r+0x1c6>
 8003944:	2300      	movs	r3, #0
 8003946:	f04f 32ff 	mov.w	r2, #4294967295
 800394a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800394e:	f10a 0a01 	add.w	sl, sl, #1
 8003952:	9304      	str	r3, [sp, #16]
 8003954:	9307      	str	r3, [sp, #28]
 8003956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800395a:	931a      	str	r3, [sp, #104]	; 0x68
 800395c:	4654      	mov	r4, sl
 800395e:	2205      	movs	r2, #5
 8003960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003964:	4850      	ldr	r0, [pc, #320]	; (8003aa8 <_svfiprintf_r+0x1e8>)
 8003966:	f000 fa67 	bl	8003e38 <memchr>
 800396a:	9a04      	ldr	r2, [sp, #16]
 800396c:	b9d8      	cbnz	r0, 80039a6 <_svfiprintf_r+0xe6>
 800396e:	06d0      	lsls	r0, r2, #27
 8003970:	bf44      	itt	mi
 8003972:	2320      	movmi	r3, #32
 8003974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003978:	0711      	lsls	r1, r2, #28
 800397a:	bf44      	itt	mi
 800397c:	232b      	movmi	r3, #43	; 0x2b
 800397e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003982:	f89a 3000 	ldrb.w	r3, [sl]
 8003986:	2b2a      	cmp	r3, #42	; 0x2a
 8003988:	d015      	beq.n	80039b6 <_svfiprintf_r+0xf6>
 800398a:	4654      	mov	r4, sl
 800398c:	2000      	movs	r0, #0
 800398e:	f04f 0c0a 	mov.w	ip, #10
 8003992:	9a07      	ldr	r2, [sp, #28]
 8003994:	4621      	mov	r1, r4
 8003996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800399a:	3b30      	subs	r3, #48	; 0x30
 800399c:	2b09      	cmp	r3, #9
 800399e:	d94d      	bls.n	8003a3c <_svfiprintf_r+0x17c>
 80039a0:	b1b0      	cbz	r0, 80039d0 <_svfiprintf_r+0x110>
 80039a2:	9207      	str	r2, [sp, #28]
 80039a4:	e014      	b.n	80039d0 <_svfiprintf_r+0x110>
 80039a6:	eba0 0308 	sub.w	r3, r0, r8
 80039aa:	fa09 f303 	lsl.w	r3, r9, r3
 80039ae:	4313      	orrs	r3, r2
 80039b0:	46a2      	mov	sl, r4
 80039b2:	9304      	str	r3, [sp, #16]
 80039b4:	e7d2      	b.n	800395c <_svfiprintf_r+0x9c>
 80039b6:	9b03      	ldr	r3, [sp, #12]
 80039b8:	1d19      	adds	r1, r3, #4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	9103      	str	r1, [sp, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bfbb      	ittet	lt
 80039c2:	425b      	neglt	r3, r3
 80039c4:	f042 0202 	orrlt.w	r2, r2, #2
 80039c8:	9307      	strge	r3, [sp, #28]
 80039ca:	9307      	strlt	r3, [sp, #28]
 80039cc:	bfb8      	it	lt
 80039ce:	9204      	strlt	r2, [sp, #16]
 80039d0:	7823      	ldrb	r3, [r4, #0]
 80039d2:	2b2e      	cmp	r3, #46	; 0x2e
 80039d4:	d10c      	bne.n	80039f0 <_svfiprintf_r+0x130>
 80039d6:	7863      	ldrb	r3, [r4, #1]
 80039d8:	2b2a      	cmp	r3, #42	; 0x2a
 80039da:	d134      	bne.n	8003a46 <_svfiprintf_r+0x186>
 80039dc:	9b03      	ldr	r3, [sp, #12]
 80039de:	3402      	adds	r4, #2
 80039e0:	1d1a      	adds	r2, r3, #4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	9203      	str	r2, [sp, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bfb8      	it	lt
 80039ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80039ee:	9305      	str	r3, [sp, #20]
 80039f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003aac <_svfiprintf_r+0x1ec>
 80039f4:	2203      	movs	r2, #3
 80039f6:	4650      	mov	r0, sl
 80039f8:	7821      	ldrb	r1, [r4, #0]
 80039fa:	f000 fa1d 	bl	8003e38 <memchr>
 80039fe:	b138      	cbz	r0, 8003a10 <_svfiprintf_r+0x150>
 8003a00:	2240      	movs	r2, #64	; 0x40
 8003a02:	9b04      	ldr	r3, [sp, #16]
 8003a04:	eba0 000a 	sub.w	r0, r0, sl
 8003a08:	4082      	lsls	r2, r0
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	3401      	adds	r4, #1
 8003a0e:	9304      	str	r3, [sp, #16]
 8003a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a14:	2206      	movs	r2, #6
 8003a16:	4826      	ldr	r0, [pc, #152]	; (8003ab0 <_svfiprintf_r+0x1f0>)
 8003a18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a1c:	f000 fa0c 	bl	8003e38 <memchr>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d038      	beq.n	8003a96 <_svfiprintf_r+0x1d6>
 8003a24:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <_svfiprintf_r+0x1f4>)
 8003a26:	bb1b      	cbnz	r3, 8003a70 <_svfiprintf_r+0x1b0>
 8003a28:	9b03      	ldr	r3, [sp, #12]
 8003a2a:	3307      	adds	r3, #7
 8003a2c:	f023 0307 	bic.w	r3, r3, #7
 8003a30:	3308      	adds	r3, #8
 8003a32:	9303      	str	r3, [sp, #12]
 8003a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a36:	4433      	add	r3, r6
 8003a38:	9309      	str	r3, [sp, #36]	; 0x24
 8003a3a:	e768      	b.n	800390e <_svfiprintf_r+0x4e>
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	2001      	movs	r0, #1
 8003a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a44:	e7a6      	b.n	8003994 <_svfiprintf_r+0xd4>
 8003a46:	2300      	movs	r3, #0
 8003a48:	f04f 0c0a 	mov.w	ip, #10
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	3401      	adds	r4, #1
 8003a50:	9305      	str	r3, [sp, #20]
 8003a52:	4620      	mov	r0, r4
 8003a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a58:	3a30      	subs	r2, #48	; 0x30
 8003a5a:	2a09      	cmp	r2, #9
 8003a5c:	d903      	bls.n	8003a66 <_svfiprintf_r+0x1a6>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0c6      	beq.n	80039f0 <_svfiprintf_r+0x130>
 8003a62:	9105      	str	r1, [sp, #20]
 8003a64:	e7c4      	b.n	80039f0 <_svfiprintf_r+0x130>
 8003a66:	4604      	mov	r4, r0
 8003a68:	2301      	movs	r3, #1
 8003a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a6e:	e7f0      	b.n	8003a52 <_svfiprintf_r+0x192>
 8003a70:	ab03      	add	r3, sp, #12
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	462a      	mov	r2, r5
 8003a76:	4638      	mov	r0, r7
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <_svfiprintf_r+0x1f8>)
 8003a7a:	a904      	add	r1, sp, #16
 8003a7c:	f3af 8000 	nop.w
 8003a80:	1c42      	adds	r2, r0, #1
 8003a82:	4606      	mov	r6, r0
 8003a84:	d1d6      	bne.n	8003a34 <_svfiprintf_r+0x174>
 8003a86:	89ab      	ldrh	r3, [r5, #12]
 8003a88:	065b      	lsls	r3, r3, #25
 8003a8a:	f53f af2d 	bmi.w	80038e8 <_svfiprintf_r+0x28>
 8003a8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a90:	b01d      	add	sp, #116	; 0x74
 8003a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a96:	ab03      	add	r3, sp, #12
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	462a      	mov	r2, r5
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <_svfiprintf_r+0x1f8>)
 8003aa0:	a904      	add	r1, sp, #16
 8003aa2:	f000 f87d 	bl	8003ba0 <_printf_i>
 8003aa6:	e7eb      	b.n	8003a80 <_svfiprintf_r+0x1c0>
 8003aa8:	08003f5a 	.word	0x08003f5a
 8003aac:	08003f60 	.word	0x08003f60
 8003ab0:	08003f64 	.word	0x08003f64
 8003ab4:	00000000 	.word	0x00000000
 8003ab8:	0800380d 	.word	0x0800380d

08003abc <_printf_common>:
 8003abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac0:	4616      	mov	r6, r2
 8003ac2:	4699      	mov	r9, r3
 8003ac4:	688a      	ldr	r2, [r1, #8]
 8003ac6:	690b      	ldr	r3, [r1, #16]
 8003ac8:	4607      	mov	r7, r0
 8003aca:	4293      	cmp	r3, r2
 8003acc:	bfb8      	it	lt
 8003ace:	4613      	movlt	r3, r2
 8003ad0:	6033      	str	r3, [r6, #0]
 8003ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003adc:	b10a      	cbz	r2, 8003ae2 <_printf_common+0x26>
 8003ade:	3301      	adds	r3, #1
 8003ae0:	6033      	str	r3, [r6, #0]
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	0699      	lsls	r1, r3, #26
 8003ae6:	bf42      	ittt	mi
 8003ae8:	6833      	ldrmi	r3, [r6, #0]
 8003aea:	3302      	addmi	r3, #2
 8003aec:	6033      	strmi	r3, [r6, #0]
 8003aee:	6825      	ldr	r5, [r4, #0]
 8003af0:	f015 0506 	ands.w	r5, r5, #6
 8003af4:	d106      	bne.n	8003b04 <_printf_common+0x48>
 8003af6:	f104 0a19 	add.w	sl, r4, #25
 8003afa:	68e3      	ldr	r3, [r4, #12]
 8003afc:	6832      	ldr	r2, [r6, #0]
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	42ab      	cmp	r3, r5
 8003b02:	dc2b      	bgt.n	8003b5c <_printf_common+0xa0>
 8003b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b08:	1e13      	subs	r3, r2, #0
 8003b0a:	6822      	ldr	r2, [r4, #0]
 8003b0c:	bf18      	it	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	0692      	lsls	r2, r2, #26
 8003b12:	d430      	bmi.n	8003b76 <_printf_common+0xba>
 8003b14:	4649      	mov	r1, r9
 8003b16:	4638      	mov	r0, r7
 8003b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b1c:	47c0      	blx	r8
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d023      	beq.n	8003b6a <_printf_common+0xae>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	6922      	ldr	r2, [r4, #16]
 8003b26:	f003 0306 	and.w	r3, r3, #6
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	bf14      	ite	ne
 8003b2e:	2500      	movne	r5, #0
 8003b30:	6833      	ldreq	r3, [r6, #0]
 8003b32:	f04f 0600 	mov.w	r6, #0
 8003b36:	bf08      	it	eq
 8003b38:	68e5      	ldreq	r5, [r4, #12]
 8003b3a:	f104 041a 	add.w	r4, r4, #26
 8003b3e:	bf08      	it	eq
 8003b40:	1aed      	subeq	r5, r5, r3
 8003b42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b46:	bf08      	it	eq
 8003b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bfc4      	itt	gt
 8003b50:	1a9b      	subgt	r3, r3, r2
 8003b52:	18ed      	addgt	r5, r5, r3
 8003b54:	42b5      	cmp	r5, r6
 8003b56:	d11a      	bne.n	8003b8e <_printf_common+0xd2>
 8003b58:	2000      	movs	r0, #0
 8003b5a:	e008      	b.n	8003b6e <_printf_common+0xb2>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	4652      	mov	r2, sl
 8003b60:	4649      	mov	r1, r9
 8003b62:	4638      	mov	r0, r7
 8003b64:	47c0      	blx	r8
 8003b66:	3001      	adds	r0, #1
 8003b68:	d103      	bne.n	8003b72 <_printf_common+0xb6>
 8003b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b72:	3501      	adds	r5, #1
 8003b74:	e7c1      	b.n	8003afa <_printf_common+0x3e>
 8003b76:	2030      	movs	r0, #48	; 0x30
 8003b78:	18e1      	adds	r1, r4, r3
 8003b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b84:	4422      	add	r2, r4
 8003b86:	3302      	adds	r3, #2
 8003b88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b8c:	e7c2      	b.n	8003b14 <_printf_common+0x58>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4622      	mov	r2, r4
 8003b92:	4649      	mov	r1, r9
 8003b94:	4638      	mov	r0, r7
 8003b96:	47c0      	blx	r8
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d0e6      	beq.n	8003b6a <_printf_common+0xae>
 8003b9c:	3601      	adds	r6, #1
 8003b9e:	e7d9      	b.n	8003b54 <_printf_common+0x98>

08003ba0 <_printf_i>:
 8003ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba4:	7e0f      	ldrb	r7, [r1, #24]
 8003ba6:	4691      	mov	r9, r2
 8003ba8:	2f78      	cmp	r7, #120	; 0x78
 8003baa:	4680      	mov	r8, r0
 8003bac:	460c      	mov	r4, r1
 8003bae:	469a      	mov	sl, r3
 8003bb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bb6:	d807      	bhi.n	8003bc8 <_printf_i+0x28>
 8003bb8:	2f62      	cmp	r7, #98	; 0x62
 8003bba:	d80a      	bhi.n	8003bd2 <_printf_i+0x32>
 8003bbc:	2f00      	cmp	r7, #0
 8003bbe:	f000 80d5 	beq.w	8003d6c <_printf_i+0x1cc>
 8003bc2:	2f58      	cmp	r7, #88	; 0x58
 8003bc4:	f000 80c1 	beq.w	8003d4a <_printf_i+0x1aa>
 8003bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bd0:	e03a      	b.n	8003c48 <_printf_i+0xa8>
 8003bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bd6:	2b15      	cmp	r3, #21
 8003bd8:	d8f6      	bhi.n	8003bc8 <_printf_i+0x28>
 8003bda:	a101      	add	r1, pc, #4	; (adr r1, 8003be0 <_printf_i+0x40>)
 8003bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003be0:	08003c39 	.word	0x08003c39
 8003be4:	08003c4d 	.word	0x08003c4d
 8003be8:	08003bc9 	.word	0x08003bc9
 8003bec:	08003bc9 	.word	0x08003bc9
 8003bf0:	08003bc9 	.word	0x08003bc9
 8003bf4:	08003bc9 	.word	0x08003bc9
 8003bf8:	08003c4d 	.word	0x08003c4d
 8003bfc:	08003bc9 	.word	0x08003bc9
 8003c00:	08003bc9 	.word	0x08003bc9
 8003c04:	08003bc9 	.word	0x08003bc9
 8003c08:	08003bc9 	.word	0x08003bc9
 8003c0c:	08003d53 	.word	0x08003d53
 8003c10:	08003c79 	.word	0x08003c79
 8003c14:	08003d0d 	.word	0x08003d0d
 8003c18:	08003bc9 	.word	0x08003bc9
 8003c1c:	08003bc9 	.word	0x08003bc9
 8003c20:	08003d75 	.word	0x08003d75
 8003c24:	08003bc9 	.word	0x08003bc9
 8003c28:	08003c79 	.word	0x08003c79
 8003c2c:	08003bc9 	.word	0x08003bc9
 8003c30:	08003bc9 	.word	0x08003bc9
 8003c34:	08003d15 	.word	0x08003d15
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	1d1a      	adds	r2, r3, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	602a      	str	r2, [r5, #0]
 8003c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0a0      	b.n	8003d8e <_printf_i+0x1ee>
 8003c4c:	6820      	ldr	r0, [r4, #0]
 8003c4e:	682b      	ldr	r3, [r5, #0]
 8003c50:	0607      	lsls	r7, r0, #24
 8003c52:	f103 0104 	add.w	r1, r3, #4
 8003c56:	6029      	str	r1, [r5, #0]
 8003c58:	d501      	bpl.n	8003c5e <_printf_i+0xbe>
 8003c5a:	681e      	ldr	r6, [r3, #0]
 8003c5c:	e003      	b.n	8003c66 <_printf_i+0xc6>
 8003c5e:	0646      	lsls	r6, r0, #25
 8003c60:	d5fb      	bpl.n	8003c5a <_printf_i+0xba>
 8003c62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c66:	2e00      	cmp	r6, #0
 8003c68:	da03      	bge.n	8003c72 <_printf_i+0xd2>
 8003c6a:	232d      	movs	r3, #45	; 0x2d
 8003c6c:	4276      	negs	r6, r6
 8003c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c72:	230a      	movs	r3, #10
 8003c74:	4859      	ldr	r0, [pc, #356]	; (8003ddc <_printf_i+0x23c>)
 8003c76:	e012      	b.n	8003c9e <_printf_i+0xfe>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	6820      	ldr	r0, [r4, #0]
 8003c7c:	1d19      	adds	r1, r3, #4
 8003c7e:	6029      	str	r1, [r5, #0]
 8003c80:	0605      	lsls	r5, r0, #24
 8003c82:	d501      	bpl.n	8003c88 <_printf_i+0xe8>
 8003c84:	681e      	ldr	r6, [r3, #0]
 8003c86:	e002      	b.n	8003c8e <_printf_i+0xee>
 8003c88:	0641      	lsls	r1, r0, #25
 8003c8a:	d5fb      	bpl.n	8003c84 <_printf_i+0xe4>
 8003c8c:	881e      	ldrh	r6, [r3, #0]
 8003c8e:	2f6f      	cmp	r7, #111	; 0x6f
 8003c90:	bf0c      	ite	eq
 8003c92:	2308      	moveq	r3, #8
 8003c94:	230a      	movne	r3, #10
 8003c96:	4851      	ldr	r0, [pc, #324]	; (8003ddc <_printf_i+0x23c>)
 8003c98:	2100      	movs	r1, #0
 8003c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c9e:	6865      	ldr	r5, [r4, #4]
 8003ca0:	2d00      	cmp	r5, #0
 8003ca2:	bfa8      	it	ge
 8003ca4:	6821      	ldrge	r1, [r4, #0]
 8003ca6:	60a5      	str	r5, [r4, #8]
 8003ca8:	bfa4      	itt	ge
 8003caa:	f021 0104 	bicge.w	r1, r1, #4
 8003cae:	6021      	strge	r1, [r4, #0]
 8003cb0:	b90e      	cbnz	r6, 8003cb6 <_printf_i+0x116>
 8003cb2:	2d00      	cmp	r5, #0
 8003cb4:	d04b      	beq.n	8003d4e <_printf_i+0x1ae>
 8003cb6:	4615      	mov	r5, r2
 8003cb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cbc:	fb03 6711 	mls	r7, r3, r1, r6
 8003cc0:	5dc7      	ldrb	r7, [r0, r7]
 8003cc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cc6:	4637      	mov	r7, r6
 8003cc8:	42bb      	cmp	r3, r7
 8003cca:	460e      	mov	r6, r1
 8003ccc:	d9f4      	bls.n	8003cb8 <_printf_i+0x118>
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d10b      	bne.n	8003cea <_printf_i+0x14a>
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	07de      	lsls	r6, r3, #31
 8003cd6:	d508      	bpl.n	8003cea <_printf_i+0x14a>
 8003cd8:	6923      	ldr	r3, [r4, #16]
 8003cda:	6861      	ldr	r1, [r4, #4]
 8003cdc:	4299      	cmp	r1, r3
 8003cde:	bfde      	ittt	le
 8003ce0:	2330      	movle	r3, #48	; 0x30
 8003ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ce6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cea:	1b52      	subs	r2, r2, r5
 8003cec:	6122      	str	r2, [r4, #16]
 8003cee:	464b      	mov	r3, r9
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	f8cd a000 	str.w	sl, [sp]
 8003cf8:	aa03      	add	r2, sp, #12
 8003cfa:	f7ff fedf 	bl	8003abc <_printf_common>
 8003cfe:	3001      	adds	r0, #1
 8003d00:	d14a      	bne.n	8003d98 <_printf_i+0x1f8>
 8003d02:	f04f 30ff 	mov.w	r0, #4294967295
 8003d06:	b004      	add	sp, #16
 8003d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	f043 0320 	orr.w	r3, r3, #32
 8003d12:	6023      	str	r3, [r4, #0]
 8003d14:	2778      	movs	r7, #120	; 0x78
 8003d16:	4832      	ldr	r0, [pc, #200]	; (8003de0 <_printf_i+0x240>)
 8003d18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	6829      	ldr	r1, [r5, #0]
 8003d20:	061f      	lsls	r7, r3, #24
 8003d22:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d26:	d402      	bmi.n	8003d2e <_printf_i+0x18e>
 8003d28:	065f      	lsls	r7, r3, #25
 8003d2a:	bf48      	it	mi
 8003d2c:	b2b6      	uxthmi	r6, r6
 8003d2e:	07df      	lsls	r7, r3, #31
 8003d30:	bf48      	it	mi
 8003d32:	f043 0320 	orrmi.w	r3, r3, #32
 8003d36:	6029      	str	r1, [r5, #0]
 8003d38:	bf48      	it	mi
 8003d3a:	6023      	strmi	r3, [r4, #0]
 8003d3c:	b91e      	cbnz	r6, 8003d46 <_printf_i+0x1a6>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	f023 0320 	bic.w	r3, r3, #32
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	2310      	movs	r3, #16
 8003d48:	e7a6      	b.n	8003c98 <_printf_i+0xf8>
 8003d4a:	4824      	ldr	r0, [pc, #144]	; (8003ddc <_printf_i+0x23c>)
 8003d4c:	e7e4      	b.n	8003d18 <_printf_i+0x178>
 8003d4e:	4615      	mov	r5, r2
 8003d50:	e7bd      	b.n	8003cce <_printf_i+0x12e>
 8003d52:	682b      	ldr	r3, [r5, #0]
 8003d54:	6826      	ldr	r6, [r4, #0]
 8003d56:	1d18      	adds	r0, r3, #4
 8003d58:	6961      	ldr	r1, [r4, #20]
 8003d5a:	6028      	str	r0, [r5, #0]
 8003d5c:	0635      	lsls	r5, r6, #24
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	d501      	bpl.n	8003d66 <_printf_i+0x1c6>
 8003d62:	6019      	str	r1, [r3, #0]
 8003d64:	e002      	b.n	8003d6c <_printf_i+0x1cc>
 8003d66:	0670      	lsls	r0, r6, #25
 8003d68:	d5fb      	bpl.n	8003d62 <_printf_i+0x1c2>
 8003d6a:	8019      	strh	r1, [r3, #0]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	4615      	mov	r5, r2
 8003d70:	6123      	str	r3, [r4, #16]
 8003d72:	e7bc      	b.n	8003cee <_printf_i+0x14e>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	2100      	movs	r1, #0
 8003d78:	1d1a      	adds	r2, r3, #4
 8003d7a:	602a      	str	r2, [r5, #0]
 8003d7c:	681d      	ldr	r5, [r3, #0]
 8003d7e:	6862      	ldr	r2, [r4, #4]
 8003d80:	4628      	mov	r0, r5
 8003d82:	f000 f859 	bl	8003e38 <memchr>
 8003d86:	b108      	cbz	r0, 8003d8c <_printf_i+0x1ec>
 8003d88:	1b40      	subs	r0, r0, r5
 8003d8a:	6060      	str	r0, [r4, #4]
 8003d8c:	6863      	ldr	r3, [r4, #4]
 8003d8e:	6123      	str	r3, [r4, #16]
 8003d90:	2300      	movs	r3, #0
 8003d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d96:	e7aa      	b.n	8003cee <_printf_i+0x14e>
 8003d98:	462a      	mov	r2, r5
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	4640      	mov	r0, r8
 8003d9e:	6923      	ldr	r3, [r4, #16]
 8003da0:	47d0      	blx	sl
 8003da2:	3001      	adds	r0, #1
 8003da4:	d0ad      	beq.n	8003d02 <_printf_i+0x162>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	079b      	lsls	r3, r3, #30
 8003daa:	d413      	bmi.n	8003dd4 <_printf_i+0x234>
 8003dac:	68e0      	ldr	r0, [r4, #12]
 8003dae:	9b03      	ldr	r3, [sp, #12]
 8003db0:	4298      	cmp	r0, r3
 8003db2:	bfb8      	it	lt
 8003db4:	4618      	movlt	r0, r3
 8003db6:	e7a6      	b.n	8003d06 <_printf_i+0x166>
 8003db8:	2301      	movs	r3, #1
 8003dba:	4632      	mov	r2, r6
 8003dbc:	4649      	mov	r1, r9
 8003dbe:	4640      	mov	r0, r8
 8003dc0:	47d0      	blx	sl
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d09d      	beq.n	8003d02 <_printf_i+0x162>
 8003dc6:	3501      	adds	r5, #1
 8003dc8:	68e3      	ldr	r3, [r4, #12]
 8003dca:	9903      	ldr	r1, [sp, #12]
 8003dcc:	1a5b      	subs	r3, r3, r1
 8003dce:	42ab      	cmp	r3, r5
 8003dd0:	dcf2      	bgt.n	8003db8 <_printf_i+0x218>
 8003dd2:	e7eb      	b.n	8003dac <_printf_i+0x20c>
 8003dd4:	2500      	movs	r5, #0
 8003dd6:	f104 0619 	add.w	r6, r4, #25
 8003dda:	e7f5      	b.n	8003dc8 <_printf_i+0x228>
 8003ddc:	08003f6b 	.word	0x08003f6b
 8003de0:	08003f7c 	.word	0x08003f7c

08003de4 <memmove>:
 8003de4:	4288      	cmp	r0, r1
 8003de6:	b510      	push	{r4, lr}
 8003de8:	eb01 0402 	add.w	r4, r1, r2
 8003dec:	d902      	bls.n	8003df4 <memmove+0x10>
 8003dee:	4284      	cmp	r4, r0
 8003df0:	4623      	mov	r3, r4
 8003df2:	d807      	bhi.n	8003e04 <memmove+0x20>
 8003df4:	1e43      	subs	r3, r0, #1
 8003df6:	42a1      	cmp	r1, r4
 8003df8:	d008      	beq.n	8003e0c <memmove+0x28>
 8003dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e02:	e7f8      	b.n	8003df6 <memmove+0x12>
 8003e04:	4601      	mov	r1, r0
 8003e06:	4402      	add	r2, r0
 8003e08:	428a      	cmp	r2, r1
 8003e0a:	d100      	bne.n	8003e0e <memmove+0x2a>
 8003e0c:	bd10      	pop	{r4, pc}
 8003e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e16:	e7f7      	b.n	8003e08 <memmove+0x24>

08003e18 <_sbrk_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	4d05      	ldr	r5, [pc, #20]	; (8003e34 <_sbrk_r+0x1c>)
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4608      	mov	r0, r1
 8003e22:	602b      	str	r3, [r5, #0]
 8003e24:	f7fd fcda 	bl	80017dc <_sbrk>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d102      	bne.n	8003e32 <_sbrk_r+0x1a>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <_sbrk_r+0x1a>
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
 8003e34:	200002c0 	.word	0x200002c0

08003e38 <memchr>:
 8003e38:	4603      	mov	r3, r0
 8003e3a:	b510      	push	{r4, lr}
 8003e3c:	b2c9      	uxtb	r1, r1
 8003e3e:	4402      	add	r2, r0
 8003e40:	4293      	cmp	r3, r2
 8003e42:	4618      	mov	r0, r3
 8003e44:	d101      	bne.n	8003e4a <memchr+0x12>
 8003e46:	2000      	movs	r0, #0
 8003e48:	e003      	b.n	8003e52 <memchr+0x1a>
 8003e4a:	7804      	ldrb	r4, [r0, #0]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	428c      	cmp	r4, r1
 8003e50:	d1f6      	bne.n	8003e40 <memchr+0x8>
 8003e52:	bd10      	pop	{r4, pc}

08003e54 <memcpy>:
 8003e54:	440a      	add	r2, r1
 8003e56:	4291      	cmp	r1, r2
 8003e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e5c:	d100      	bne.n	8003e60 <memcpy+0xc>
 8003e5e:	4770      	bx	lr
 8003e60:	b510      	push	{r4, lr}
 8003e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e66:	4291      	cmp	r1, r2
 8003e68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e6c:	d1f9      	bne.n	8003e62 <memcpy+0xe>
 8003e6e:	bd10      	pop	{r4, pc}

08003e70 <_realloc_r>:
 8003e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e74:	4680      	mov	r8, r0
 8003e76:	4614      	mov	r4, r2
 8003e78:	460e      	mov	r6, r1
 8003e7a:	b921      	cbnz	r1, 8003e86 <_realloc_r+0x16>
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e82:	f7ff bc37 	b.w	80036f4 <_malloc_r>
 8003e86:	b92a      	cbnz	r2, 8003e94 <_realloc_r+0x24>
 8003e88:	f7ff fbcc 	bl	8003624 <_free_r>
 8003e8c:	4625      	mov	r5, r4
 8003e8e:	4628      	mov	r0, r5
 8003e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e94:	f000 f81b 	bl	8003ece <_malloc_usable_size_r>
 8003e98:	4284      	cmp	r4, r0
 8003e9a:	4607      	mov	r7, r0
 8003e9c:	d802      	bhi.n	8003ea4 <_realloc_r+0x34>
 8003e9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ea2:	d812      	bhi.n	8003eca <_realloc_r+0x5a>
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	4640      	mov	r0, r8
 8003ea8:	f7ff fc24 	bl	80036f4 <_malloc_r>
 8003eac:	4605      	mov	r5, r0
 8003eae:	2800      	cmp	r0, #0
 8003eb0:	d0ed      	beq.n	8003e8e <_realloc_r+0x1e>
 8003eb2:	42bc      	cmp	r4, r7
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	4631      	mov	r1, r6
 8003eb8:	bf28      	it	cs
 8003eba:	463a      	movcs	r2, r7
 8003ebc:	f7ff ffca 	bl	8003e54 <memcpy>
 8003ec0:	4631      	mov	r1, r6
 8003ec2:	4640      	mov	r0, r8
 8003ec4:	f7ff fbae 	bl	8003624 <_free_r>
 8003ec8:	e7e1      	b.n	8003e8e <_realloc_r+0x1e>
 8003eca:	4635      	mov	r5, r6
 8003ecc:	e7df      	b.n	8003e8e <_realloc_r+0x1e>

08003ece <_malloc_usable_size_r>:
 8003ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed2:	1f18      	subs	r0, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bfbc      	itt	lt
 8003ed8:	580b      	ldrlt	r3, [r1, r0]
 8003eda:	18c0      	addlt	r0, r0, r3
 8003edc:	4770      	bx	lr
	...

08003ee0 <_init>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	bf00      	nop
 8003ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee6:	bc08      	pop	{r3}
 8003ee8:	469e      	mov	lr, r3
 8003eea:	4770      	bx	lr

08003eec <_fini>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr
